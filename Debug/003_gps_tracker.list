
003_gps_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006114  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080062e8  080062e8  000162e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006388  08006388  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006388  08006388  00016388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000070  08006400  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08006400  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a049  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acc  00000000  00000000  0002a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218f2  00000000  00000000  0002ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000accf  00000000  00000000  0004e322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9590  00000000  00000000  00058ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  001225d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080062cc 	.word	0x080062cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080062cc 	.word	0x080062cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <GPS_Init>:
//////////////////////////////////////////////////////////////
/*
 * This function start the uart interrupt
 */
void GPS_Init(UART_HandleTypeDef *uart, GPS *gps)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	gpsUart = uart;
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <GPS_Init+0x2c>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6013      	str	r3, [r2, #0]
	_gps = gps;
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <GPS_Init+0x30>)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(gpsUart, &rxGps , 1);
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <GPS_Init+0x2c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <GPS_Init+0x34>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fea5 	bl	8003cda <HAL_UART_Receive_IT>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	20000190 	.word	0x20000190
 8000fa0:	2000018c 	.word	0x2000018c

08000fa4 <HAL_UART_RxCpltCallback>:
//////////////////////////////////////////////////////////////
/*
 * When rx pin read, store the datas in ringBuff structure
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == gpsUart->Instance)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_UART_RxCpltCallback+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d123      	bne.n	8001002 <HAL_UART_RxCpltCallback+0x5e>
	{
		HAL_UART_Receive_IT(gpsUart, &rxGps, 1);
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_UART_RxCpltCallback+0x68>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4913      	ldr	r1, [pc, #76]	; (8001010 <HAL_UART_RxCpltCallback+0x6c>)
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fe89 	bl	8003cda <HAL_UART_Receive_IT>
		ringBuff.rxGps[HEAD_INCREASE] = rxGps;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_UART_RxCpltCallback+0x70>)
 8000fca:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_UART_RxCpltCallback+0x74>)
 8000fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	21fa      	movs	r1, #250	; 0xfa
 8000fde:	fb01 f303 	mul.w	r3, r1, r3
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_UART_RxCpltCallback+0x70>)
 8000fe8:	4611      	mov	r1, r2
 8000fea:	f883 10fb 	strb.w	r1, [r3, #251]	; 0xfb
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_UART_RxCpltCallback+0x6c>)
 8000ff0:	7819      	ldrb	r1, [r3, #0]
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_UART_RxCpltCallback+0x70>)
 8000ff4:	5499      	strb	r1, [r3, r2]
		if(rxGps == '\r')	GPS_Parse();
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_UART_RxCpltCallback+0x6c>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b0d      	cmp	r3, #13
 8000ffc:	d101      	bne.n	8001002 <HAL_UART_RxCpltCallback+0x5e>
 8000ffe:	f000 f80d 	bl	800101c <GPS_Parse>
	}
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000008c 	.word	0x2000008c
 8001010:	2000018c 	.word	0x2000018c
 8001014:	20000090 	.word	0x20000090
 8001018:	10624dd3 	.word	0x10624dd3

0800101c <GPS_Parse>:
/////////////////////////////////////////////////////////////
/*
 * This function parses parameters and store them in GPS structure
 */
GPS_State GPS_Parse()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 8001020:	e01d      	b.n	800105e <GPS_Parse+0x42>
	{
		if(ringBuff.tail == ringBuff.head) return NO_CONNECTION;
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <GPS_Parse+0x124>)
 8001024:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <GPS_Parse+0x124>)
 800102c:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8001030:	b2db      	uxtb	r3, r3
 8001032:	429a      	cmp	r2, r3
 8001034:	d101      	bne.n	800103a <GPS_Parse+0x1e>
 8001036:	2300      	movs	r3, #0
 8001038:	e07f      	b.n	800113a <GPS_Parse+0x11e>
		TAIL_INCREASE;						//tail değerini arttırır
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <GPS_Parse+0x124>)
 800103c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	461a      	mov	r2, r3
 8001046:	4b3f      	ldr	r3, [pc, #252]	; (8001144 <GPS_Parse+0x128>)
 8001048:	fba3 1302 	umull	r1, r3, r3, r2
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	21fa      	movs	r1, #250	; 0xfa
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b39      	ldr	r3, [pc, #228]	; (8001140 <GPS_Parse+0x124>)
 800105a:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
	while(TAIL_READ != '$')					//tail değerini $ olana kadar arttırır
 800105e:	4b38      	ldr	r3, [pc, #224]	; (8001140 <GPS_Parse+0x124>)
 8001060:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4a37      	ldr	r2, [pc, #220]	; (8001144 <GPS_Parse+0x128>)
 8001068:	fba2 1203 	umull	r1, r2, r2, r3
 800106c:	0912      	lsrs	r2, r2, #4
 800106e:	21fa      	movs	r1, #250	; 0xfa
 8001070:	fb01 f202 	mul.w	r2, r1, r2
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	461a      	mov	r2, r3
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <GPS_Parse+0x124>)
 800107c:	5c9b      	ldrb	r3, [r3, r2]
 800107e:	2b24      	cmp	r3, #36	; 0x24
 8001080:	d1cf      	bne.n	8001022 <GPS_Parse+0x6>
	}

	TAIL_INCREASE;							//$ ifadesinden sonraki kısma geçer
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <GPS_Parse+0x124>)
 8001084:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3301      	adds	r3, #1
 800108c:	461a      	mov	r2, r3
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <GPS_Parse+0x128>)
 8001090:	fba3 1302 	umull	r1, r3, r3, r2
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	21fa      	movs	r1, #250	; 0xfa
 8001098:	fb01 f303 	mul.w	r3, r1, r3
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <GPS_Parse+0x124>)
 80010a2:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa

	if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPGGA_STR, 5) == 0)
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <GPS_Parse+0x124>)
 80010a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <GPS_Parse+0x124>)
 80010b2:	4413      	add	r3, r2
 80010b4:	2205      	movs	r2, #5
 80010b6:	4924      	ldr	r1, [pc, #144]	; (8001148 <GPS_Parse+0x12c>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fd8b 	bl	8004bd4 <strncmp>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <GPS_Parse+0xb0>
	{
		return GPS_GPGGA_Parse();
 80010c4:	f000 fd5c 	bl	8001b80 <GPS_GPGGA_Parse>
 80010c8:	4603      	mov	r3, r0
 80010ca:	e036      	b.n	800113a <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPRMC_STR, 5) == 0)
 80010cc:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <GPS_Parse+0x124>)
 80010ce:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <GPS_Parse+0x124>)
 80010d8:	4413      	add	r3, r2
 80010da:	2205      	movs	r2, #5
 80010dc:	491b      	ldr	r1, [pc, #108]	; (800114c <GPS_Parse+0x130>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fd78 	bl	8004bd4 <strncmp>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10b      	bne.n	8001102 <GPS_Parse+0xe6>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPRMC_Parse() : NO_CONNECTION;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <GPS_Parse+0x134>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d103      	bne.n	80010fe <GPS_Parse+0xe2>
 80010f6:	f000 f82f 	bl	8001158 <GPS_GPRMC_Parse>
 80010fa:	4603      	mov	r3, r0
 80010fc:	e01d      	b.n	800113a <GPS_Parse+0x11e>
 80010fe:	2300      	movs	r3, #0
 8001100:	e01b      	b.n	800113a <GPS_Parse+0x11e>
	}
	else if(strncmp((char*)&ringBuff.rxGps[ringBuff.tail], GPVTG_STR, 5) == 0)
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <GPS_Parse+0x124>)
 8001104:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001108:	b2db      	uxtb	r3, r3
 800110a:	461a      	mov	r2, r3
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <GPS_Parse+0x124>)
 800110e:	4413      	add	r3, r2
 8001110:	2205      	movs	r2, #5
 8001112:	4910      	ldr	r1, [pc, #64]	; (8001154 <GPS_Parse+0x138>)
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fd5d 	bl	8004bd4 <strncmp>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10b      	bne.n	8001138 <GPS_Parse+0x11c>
	{
		return (_gps->gpsState == POSITION_FIXED)? GPS_GPVTG_Parse() : NO_CONNECTION;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <GPS_Parse+0x134>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001128:	2b02      	cmp	r3, #2
 800112a:	d103      	bne.n	8001134 <GPS_Parse+0x118>
 800112c:	f000 ff28 	bl	8001f80 <GPS_GPVTG_Parse>
 8001130:	4603      	mov	r3, r0
 8001132:	e002      	b.n	800113a <GPS_Parse+0x11e>
 8001134:	2300      	movs	r3, #0
 8001136:	e000      	b.n	800113a <GPS_Parse+0x11e>
	}
	return NO_CONNECTION;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000090 	.word	0x20000090
 8001144:	10624dd3 	.word	0x10624dd3
 8001148:	080062e8 	.word	0x080062e8
 800114c:	080062f0 	.word	0x080062f0
 8001150:	20000190 	.word	0x20000190
 8001154:	080062f8 	.word	0x080062f8

08001158 <GPS_GPRMC_Parse>:
/*
 * GPRMC verilerini çözer ve gps değerine atar
 * -tarih, saat, enlem, boylam-
 */
GPS_State GPS_GPRMC_Parse()
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <GPS_GPRMC_Parse+0x24>)
 800115e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <GPS_GPRMC_Parse+0x24>)
 8001168:	4413      	add	r3, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f001 f8d8 	bl	8002320 <GPS_CheckSumControl>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <GPS_GPRMC_Parse+0x28>
	{
		return WRONG_DATA;
 8001176:	2301      	movs	r3, #1
 8001178:	f000 bcfa 	b.w	8001b70 <GPS_GPRMC_Parse+0xa18>
 800117c:	20000090 	.word	0x20000090
	}

	if(ringBuff.rxGps[(ringBuff.tail + 16) % BUFF_SIZE] == 'A' && GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail])) // okuma işlemi doğru
 8001180:	4bb8      	ldr	r3, [pc, #736]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001182:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001186:	b2db      	uxtb	r3, r3
 8001188:	3310      	adds	r3, #16
 800118a:	461a      	mov	r2, r3
 800118c:	4bb6      	ldr	r3, [pc, #728]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 800118e:	fba3 1302 	umull	r1, r3, r3, r2
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	21fa      	movs	r1, #250	; 0xfa
 8001196:	fb01 f303 	mul.w	r3, r1, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	4ab1      	ldr	r2, [pc, #708]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800119e:	5cd3      	ldrb	r3, [r2, r3]
 80011a0:	2b41      	cmp	r3, #65	; 0x41
 80011a2:	f040 84e4 	bne.w	8001b6e <GPS_GPRMC_Parse+0xa16>
 80011a6:	4baf      	ldr	r3, [pc, #700]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	4bac      	ldr	r3, [pc, #688]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011b2:	4413      	add	r3, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 f8b3 	bl	8002320 <GPS_CheckSumControl>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 84d6 	beq.w	8001b6e <GPS_GPRMC_Parse+0xa16>
	{
		TAIL_INCREASE_TO_COMMA;
 80011c2:	4ba8      	ldr	r3, [pc, #672]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011c4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	b2d1      	uxtb	r1, r2
 80011ce:	4aa5      	ldr	r2, [pc, #660]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011d0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80011d4:	4aa4      	ldr	r2, [pc, #656]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 80011d6:	fba2 1203 	umull	r1, r2, r2, r3
 80011da:	0912      	lsrs	r2, r2, #4
 80011dc:	21fa      	movs	r1, #250	; 0xfa
 80011de:	fb01 f202 	mul.w	r2, r1, r2
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	4b9e      	ldr	r3, [pc, #632]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011ea:	5c9b      	ldrb	r3, [r3, r2]
 80011ec:	2b2c      	cmp	r3, #44	; 0x2c
 80011ee:	d1e8      	bne.n	80011c2 <GPS_GPRMC_Parse+0x6a>
		//↑ ifadesi tail değerini attırır çünkü "GPRMC," ifadesi 6 karakterden oluşuyor
		_gps->hour = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER) + TURKIYE_UTC;
 80011f0:	4b9c      	ldr	r3, [pc, #624]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011f2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	b2d1      	uxtb	r1, r2
 80011fc:	4a99      	ldr	r2, [pc, #612]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80011fe:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001202:	4a99      	ldr	r2, [pc, #612]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001204:	fba2 1203 	umull	r1, r2, r2, r3
 8001208:	0912      	lsrs	r2, r2, #4
 800120a:	21fa      	movs	r1, #250	; 0xfa
 800120c:	fb01 f202 	mul.w	r2, r1, r2
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4b93      	ldr	r3, [pc, #588]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001218:	5c9b      	ldrb	r3, [r3, r2]
 800121a:	461a      	mov	r2, r3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b8f      	ldr	r3, [pc, #572]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001226:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800122a:	b2db      	uxtb	r3, r3
 800122c:	1c59      	adds	r1, r3, #1
 800122e:	b2c8      	uxtb	r0, r1
 8001230:	498c      	ldr	r1, [pc, #560]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001232:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001236:	498c      	ldr	r1, [pc, #560]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001238:	fba1 0103 	umull	r0, r1, r1, r3
 800123c:	0909      	lsrs	r1, r1, #4
 800123e:	20fa      	movs	r0, #250	; 0xfa
 8001240:	fb00 f101 	mul.w	r1, r0, r1
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4619      	mov	r1, r3
 800124a:	4b86      	ldr	r3, [pc, #536]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800124c:	5c5b      	ldrb	r3, [r3, r1]
 800124e:	4413      	add	r3, r2
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b86      	ldr	r3, [pc, #536]	; (800146c <GPS_GPRMC_Parse+0x314>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3a0d      	subs	r2, #13
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
		_gps->minute = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800125e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001262:	b2db      	uxtb	r3, r3
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	b2d1      	uxtb	r1, r2
 8001268:	4a7e      	ldr	r2, [pc, #504]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800126a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800126e:	4a7e      	ldr	r2, [pc, #504]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001270:	fba2 1203 	umull	r1, r2, r2, r3
 8001274:	0912      	lsrs	r2, r2, #4
 8001276:	21fa      	movs	r1, #250	; 0xfa
 8001278:	fb01 f202 	mul.w	r2, r1, r2
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001284:	5c9b      	ldrb	r3, [r3, r2]
 8001286:	461a      	mov	r2, r3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b74      	ldr	r3, [pc, #464]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001292:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001296:	b2db      	uxtb	r3, r3
 8001298:	1c59      	adds	r1, r3, #1
 800129a:	b2c8      	uxtb	r0, r1
 800129c:	4971      	ldr	r1, [pc, #452]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800129e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 80012a2:	4971      	ldr	r1, [pc, #452]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 80012a4:	fba1 0103 	umull	r0, r1, r1, r3
 80012a8:	0909      	lsrs	r1, r1, #4
 80012aa:	20fa      	movs	r0, #250	; 0xfa
 80012ac:	fb00 f101 	mul.w	r1, r0, r1
 80012b0:	1a5b      	subs	r3, r3, r1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80012b8:	5c5b      	ldrb	r3, [r3, r1]
 80012ba:	4413      	add	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b6b      	ldr	r3, [pc, #428]	; (800146c <GPS_GPRMC_Parse+0x314>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3a10      	subs	r2, #16
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	705a      	strb	r2, [r3, #1]
		_gps->second = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 80012c8:	4b66      	ldr	r3, [pc, #408]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80012ca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	1c5a      	adds	r2, r3, #1
 80012d2:	b2d1      	uxtb	r1, r2
 80012d4:	4a63      	ldr	r2, [pc, #396]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80012d6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80012da:	4a63      	ldr	r2, [pc, #396]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 80012dc:	fba2 1203 	umull	r1, r2, r2, r3
 80012e0:	0912      	lsrs	r2, r2, #4
 80012e2:	21fa      	movs	r1, #250	; 0xfa
 80012e4:	fb01 f202 	mul.w	r2, r1, r2
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80012f0:	5c9b      	ldrb	r3, [r3, r2]
 80012f2:	461a      	mov	r2, r3
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b59      	ldr	r3, [pc, #356]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80012fe:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001302:	b2db      	uxtb	r3, r3
 8001304:	1c59      	adds	r1, r3, #1
 8001306:	b2c8      	uxtb	r0, r1
 8001308:	4956      	ldr	r1, [pc, #344]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800130a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 800130e:	4956      	ldr	r1, [pc, #344]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001310:	fba1 0103 	umull	r0, r1, r1, r3
 8001314:	0909      	lsrs	r1, r1, #4
 8001316:	20fa      	movs	r0, #250	; 0xfa
 8001318:	fb00 f101 	mul.w	r1, r0, r1
 800131c:	1a5b      	subs	r3, r3, r1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	4b50      	ldr	r3, [pc, #320]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001324:	5c5b      	ldrb	r3, [r3, r1]
 8001326:	4413      	add	r3, r2
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b50      	ldr	r3, [pc, #320]	; (800146c <GPS_GPRMC_Parse+0x314>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3a10      	subs	r2, #16
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	709a      	strb	r2, [r3, #2]

		TAIL_INCREASE_TO_COMMA;
 8001334:	4b4b      	ldr	r3, [pc, #300]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001336:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800133a:	b2db      	uxtb	r3, r3
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	b2d1      	uxtb	r1, r2
 8001340:	4a48      	ldr	r2, [pc, #288]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001342:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001346:	4a48      	ldr	r2, [pc, #288]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001348:	fba2 1203 	umull	r1, r2, r2, r3
 800134c:	0912      	lsrs	r2, r2, #4
 800134e:	21fa      	movs	r1, #250	; 0xfa
 8001350:	fb01 f202 	mul.w	r2, r1, r2
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800135c:	5c9b      	ldrb	r3, [r3, r2]
 800135e:	2b2c      	cmp	r3, #44	; 0x2c
 8001360:	d1e8      	bne.n	8001334 <GPS_GPRMC_Parse+0x1dc>
		TAIL_INCREASE_TO_COMMA;
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001364:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001368:	b2db      	uxtb	r3, r3
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	b2d1      	uxtb	r1, r2
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001370:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001374:	4a3c      	ldr	r2, [pc, #240]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001376:	fba2 1203 	umull	r1, r2, r2, r3
 800137a:	0912      	lsrs	r2, r2, #4
 800137c:	21fa      	movs	r1, #250	; 0xfa
 800137e:	fb01 f202 	mul.w	r2, r1, r2
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	2b2c      	cmp	r3, #44	; 0x2c
 800138e:	d1e8      	bne.n	8001362 <GPS_GPRMC_Parse+0x20a>

		//genlik değerinin alır
		_gps->latitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001392:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001396:	b2db      	uxtb	r3, r3
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	b2d1      	uxtb	r1, r2
 800139c:	4a31      	ldr	r2, [pc, #196]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800139e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80013a2:	4a31      	ldr	r2, [pc, #196]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 80013a4:	fba2 1203 	umull	r1, r2, r2, r3
 80013a8:	0912      	lsrs	r2, r2, #4
 80013aa:	21fa      	movs	r1, #250	; 0xfa
 80013ac:	fb01 f202 	mul.w	r2, r1, r2
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80013b8:	5c9b      	ldrb	r3, [r3, r2]
 80013ba:	461a      	mov	r2, r3
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80013c6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	b2c8      	uxtb	r0, r1
 80013d0:	4924      	ldr	r1, [pc, #144]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80013d2:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 80013d6:	4924      	ldr	r1, [pc, #144]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 80013d8:	fba1 0103 	umull	r0, r1, r1, r3
 80013dc:	0909      	lsrs	r1, r1, #4
 80013de:	20fa      	movs	r0, #250	; 0xfa
 80013e0:	fb00 f101 	mul.w	r1, r0, r1
 80013e4:	1a5b      	subs	r3, r3, r1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80013ec:	5c5b      	ldrb	r3, [r3, r1]
 80013ee:	4413      	add	r3, r2
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <GPS_GPRMC_Parse+0x314>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3a10      	subs	r2, #16
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	70da      	strb	r2, [r3, #3]
		_gps->latitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 80013fe:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001402:	b2db      	uxtb	r3, r3
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	b2d1      	uxtb	r1, r2
 8001408:	4a16      	ldr	r2, [pc, #88]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800140a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800140e:	4a16      	ldr	r2, [pc, #88]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001410:	fba2 1203 	umull	r1, r2, r2, r3
 8001414:	0912      	lsrs	r2, r2, #4
 8001416:	21fa      	movs	r1, #250	; 0xfa
 8001418:	fb01 f202 	mul.w	r2, r1, r2
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	b2db      	uxtb	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	3b30      	subs	r3, #48	; 0x30
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f893 	bl	8000554 <__aeabi_i2d>
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <GPS_GPRMC_Parse+0x318>)
 8001434:	f7ff f8f8 	bl	8000628 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 8001442:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001446:	b2db      	uxtb	r3, r3
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	b2d1      	uxtb	r1, r2
 800144c:	4a05      	ldr	r2, [pc, #20]	; (8001464 <GPS_GPRMC_Parse+0x30c>)
 800144e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <GPS_GPRMC_Parse+0x310>)
 8001454:	fba2 1203 	umull	r1, r2, r2, r3
 8001458:	0912      	lsrs	r2, r2, #4
 800145a:	21fa      	movs	r1, #250	; 0xfa
 800145c:	fb01 f202 	mul.w	r2, r1, r2
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	e007      	b.n	8001474 <GPS_GPRMC_Parse+0x31c>
 8001464:	20000090 	.word	0x20000090
 8001468:	10624dd3 	.word	0x10624dd3
 800146c:	20000190 	.word	0x20000190
 8001470:	40240000 	.word	0x40240000
 8001474:	b2db      	uxtb	r3, r3
 8001476:	461a      	mov	r2, r3
 8001478:	4b70      	ldr	r3, [pc, #448]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 800147a:	5c9b      	ldrb	r3, [r3, r2]
 800147c:	3b30      	subs	r3, #48	; 0x30
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f868 	bl	8000554 <__aeabi_i2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4620      	mov	r0, r4
 800148a:	4629      	mov	r1, r5
 800148c:	f7fe ff16 	bl	80002bc <__adddf3>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	496a      	ldr	r1, [pc, #424]	; (8001640 <GPS_GPRMC_Parse+0x4e8>)
 8001496:	680c      	ldr	r4, [r1, #0]
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fb74 	bl	8000b88 <__aeabi_d2uiz>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	7123      	strb	r3, [r4, #4]
		TAIL_INCREASE;		// "." geçtik
 80014a6:	4b65      	ldr	r3, [pc, #404]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80014a8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b64      	ldr	r3, [pc, #400]	; (8001644 <GPS_GPRMC_Parse+0x4ec>)
 80014b4:	fba3 1302 	umull	r1, r3, r3, r2
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	21fa      	movs	r1, #250	; 0xfa
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80014c6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->latitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) *100.0 + (TAIL_READ_P - ASCII_NUMBER)*10.0 + (TAIL_READ_P - ASCII_NUMBER)*1.0) / 1000 * 60;
 80014ca:	4b5c      	ldr	r3, [pc, #368]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80014cc:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	b2d1      	uxtb	r1, r2
 80014d6:	4a59      	ldr	r2, [pc, #356]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80014d8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80014dc:	4a59      	ldr	r2, [pc, #356]	; (8001644 <GPS_GPRMC_Parse+0x4ec>)
 80014de:	fba2 1203 	umull	r1, r2, r2, r3
 80014e2:	0912      	lsrs	r2, r2, #4
 80014e4:	21fa      	movs	r1, #250	; 0xfa
 80014e6:	fb01 f202 	mul.w	r2, r1, r2
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b52      	ldr	r3, [pc, #328]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	3b30      	subs	r3, #48	; 0x30
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f82c 	bl	8000554 <__aeabi_i2d>
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b51      	ldr	r3, [pc, #324]	; (8001648 <GPS_GPRMC_Parse+0x4f0>)
 8001502:	f7ff f891 	bl	8000628 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4614      	mov	r4, r2
 800150c:	461d      	mov	r5, r3
 800150e:	4b4b      	ldr	r3, [pc, #300]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 8001510:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001514:	b2db      	uxtb	r3, r3
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	4a48      	ldr	r2, [pc, #288]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 800151c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001520:	4a48      	ldr	r2, [pc, #288]	; (8001644 <GPS_GPRMC_Parse+0x4ec>)
 8001522:	fba2 1203 	umull	r1, r2, r2, r3
 8001526:	0912      	lsrs	r2, r2, #4
 8001528:	21fa      	movs	r1, #250	; 0xfa
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	4b41      	ldr	r3, [pc, #260]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 8001536:	5c9b      	ldrb	r3, [r3, r2]
 8001538:	3b30      	subs	r3, #48	; 0x30
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f80a 	bl	8000554 <__aeabi_i2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b41      	ldr	r3, [pc, #260]	; (800164c <GPS_GPRMC_Parse+0x4f4>)
 8001546:	f7ff f86f 	bl	8000628 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4620      	mov	r0, r4
 8001550:	4629      	mov	r1, r5
 8001552:	f7fe feb3 	bl	80002bc <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4614      	mov	r4, r2
 800155c:	461d      	mov	r5, r3
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 8001560:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001564:	b2db      	uxtb	r3, r3
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	b2d1      	uxtb	r1, r2
 800156a:	4a34      	ldr	r2, [pc, #208]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 800156c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001570:	4a34      	ldr	r2, [pc, #208]	; (8001644 <GPS_GPRMC_Parse+0x4ec>)
 8001572:	fba2 1203 	umull	r1, r2, r2, r3
 8001576:	0912      	lsrs	r2, r2, #4
 8001578:	21fa      	movs	r1, #250	; 0xfa
 800157a:	fb01 f202 	mul.w	r2, r1, r2
 800157e:	1a9b      	subs	r3, r3, r2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 8001586:	5c9b      	ldrb	r3, [r3, r2]
 8001588:	3b30      	subs	r3, #48	; 0x30
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe2 	bl	8000554 <__aeabi_i2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4620      	mov	r0, r4
 8001596:	4629      	mov	r1, r5
 8001598:	f7fe fe90 	bl	80002bc <__adddf3>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <GPS_GPRMC_Parse+0x4f8>)
 80015aa:	f7ff f967 	bl	800087c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <GPS_GPRMC_Parse+0x4fc>)
 80015bc:	f7ff f834 	bl	8000628 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	491e      	ldr	r1, [pc, #120]	; (8001640 <GPS_GPRMC_Parse+0x4e8>)
 80015c6:	680c      	ldr	r4, [r1, #0]
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fafc 	bl	8000bc8 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	60a3      	str	r3, [r4, #8]

		TAIL_INCREASE_TO_COMMA;
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80015d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	b2d1      	uxtb	r1, r2
 80015e0:	4a16      	ldr	r2, [pc, #88]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80015e2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80015e6:	4a17      	ldr	r2, [pc, #92]	; (8001644 <GPS_GPRMC_Parse+0x4ec>)
 80015e8:	fba2 1203 	umull	r1, r2, r2, r3
 80015ec:	0912      	lsrs	r2, r2, #4
 80015ee:	21fa      	movs	r1, #250	; 0xfa
 80015f0:	fb01 f202 	mul.w	r2, r1, r2
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 80015fc:	5c9b      	ldrb	r3, [r3, r2]
 80015fe:	2b2c      	cmp	r3, #44	; 0x2c
 8001600:	d1e8      	bne.n	80015d4 <GPS_GPRMC_Parse+0x47c>

		// Pole bilgisini alır
		if(TAIL_READ_P == 'N')	_gps->locationLat = NORTH;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 8001604:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001608:	b2db      	uxtb	r3, r3
 800160a:	1c5a      	adds	r2, r3, #1
 800160c:	b2d1      	uxtb	r1, r2
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 8001610:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <GPS_GPRMC_Parse+0x4ec>)
 8001616:	fba2 1203 	umull	r1, r2, r2, r3
 800161a:	0912      	lsrs	r2, r2, #4
 800161c:	21fa      	movs	r1, #250	; 0xfa
 800161e:	fb01 f202 	mul.w	r2, r1, r2
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	b2db      	uxtb	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <GPS_GPRMC_Parse+0x4e4>)
 800162a:	5c9b      	ldrb	r3, [r3, r2]
 800162c:	2b4e      	cmp	r3, #78	; 0x4e
 800162e:	d113      	bne.n	8001658 <GPS_GPRMC_Parse+0x500>
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <GPS_GPRMC_Parse+0x4e8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	731a      	strb	r2, [r3, #12]
 8001638:	e012      	b.n	8001660 <GPS_GPRMC_Parse+0x508>
 800163a:	bf00      	nop
 800163c:	20000090 	.word	0x20000090
 8001640:	20000190 	.word	0x20000190
 8001644:	10624dd3 	.word	0x10624dd3
 8001648:	40590000 	.word	0x40590000
 800164c:	40240000 	.word	0x40240000
 8001650:	408f4000 	.word	0x408f4000
 8001654:	404e0000 	.word	0x404e0000
		else 					_gps->locationLat = SOUTH;
 8001658:	4bc1      	ldr	r3, [pc, #772]	; (8001960 <GPS_GPRMC_Parse+0x808>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	731a      	strb	r2, [r3, #12]

		TAIL_INCREASE_TO_COMMA;		// "," geçtik
 8001660:	4bc0      	ldr	r3, [pc, #768]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001662:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001666:	b2db      	uxtb	r3, r3
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	b2d1      	uxtb	r1, r2
 800166c:	4abd      	ldr	r2, [pc, #756]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800166e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001672:	4abd      	ldr	r2, [pc, #756]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001674:	fba2 1203 	umull	r1, r2, r2, r3
 8001678:	0912      	lsrs	r2, r2, #4
 800167a:	21fa      	movs	r1, #250	; 0xfa
 800167c:	fb01 f202 	mul.w	r2, r1, r2
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	4bb7      	ldr	r3, [pc, #732]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001688:	5c9b      	ldrb	r3, [r3, r2]
 800168a:	2b2c      	cmp	r3, #44	; 0x2c
 800168c:	d1e8      	bne.n	8001660 <GPS_GPRMC_Parse+0x508>

		// Boylam bilgisini alır
		_gps->longitudeDegree = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 800168e:	4bb5      	ldr	r3, [pc, #724]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001690:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001694:	b2db      	uxtb	r3, r3
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	b2d1      	uxtb	r1, r2
 800169a:	4ab2      	ldr	r2, [pc, #712]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800169c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80016a0:	4ab1      	ldr	r2, [pc, #708]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 80016a2:	fba2 1203 	umull	r1, r2, r2, r3
 80016a6:	0912      	lsrs	r2, r2, #4
 80016a8:	21fa      	movs	r1, #250	; 0xfa
 80016aa:	fb01 f202 	mul.w	r2, r1, r2
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	4bab      	ldr	r3, [pc, #684]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80016b6:	5c9b      	ldrb	r3, [r3, r2]
 80016b8:	461a      	mov	r2, r3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4413      	add	r3, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	0091      	lsls	r1, r2, #2
 80016c2:	461a      	mov	r2, r3
 80016c4:	460b      	mov	r3, r1
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4ba5      	ldr	r3, [pc, #660]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80016ce:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	1c59      	adds	r1, r3, #1
 80016d6:	b2c8      	uxtb	r0, r1
 80016d8:	49a2      	ldr	r1, [pc, #648]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80016da:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 80016de:	49a2      	ldr	r1, [pc, #648]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 80016e0:	fba1 0103 	umull	r0, r1, r1, r3
 80016e4:	0909      	lsrs	r1, r1, #4
 80016e6:	20fa      	movs	r0, #250	; 0xfa
 80016e8:	fb00 f101 	mul.w	r1, r0, r1
 80016ec:	1a5b      	subs	r3, r3, r1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	4b9c      	ldr	r3, [pc, #624]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80016f4:	5c5b      	ldrb	r3, [r3, r1]
 80016f6:	4619      	mov	r1, r3
 80016f8:	0089      	lsls	r1, r1, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4413      	add	r3, r2
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b97      	ldr	r3, [pc, #604]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001706:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800170a:	b2db      	uxtb	r3, r3
 800170c:	1c59      	adds	r1, r3, #1
 800170e:	b2c8      	uxtb	r0, r1
 8001710:	4994      	ldr	r1, [pc, #592]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001712:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001716:	4994      	ldr	r1, [pc, #592]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001718:	fba1 0103 	umull	r0, r1, r1, r3
 800171c:	0909      	lsrs	r1, r1, #4
 800171e:	20fa      	movs	r0, #250	; 0xfa
 8001720:	fb00 f101 	mul.w	r1, r0, r1
 8001724:	1a5b      	subs	r3, r3, r1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	4619      	mov	r1, r3
 800172a:	4b8e      	ldr	r3, [pc, #568]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800172c:	5c5b      	ldrb	r3, [r3, r1]
 800172e:	4413      	add	r3, r2
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <GPS_GPRMC_Parse+0x808>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3230      	adds	r2, #48	; 0x30
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	735a      	strb	r2, [r3, #13]
		_gps->longitudeMinute = (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER);
 800173c:	4b89      	ldr	r3, [pc, #548]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800173e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001742:	b2db      	uxtb	r3, r3
 8001744:	1c5a      	adds	r2, r3, #1
 8001746:	b2d1      	uxtb	r1, r2
 8001748:	4a86      	ldr	r2, [pc, #536]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800174a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800174e:	4a86      	ldr	r2, [pc, #536]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001750:	fba2 1203 	umull	r1, r2, r2, r3
 8001754:	0912      	lsrs	r2, r2, #4
 8001756:	21fa      	movs	r1, #250	; 0xfa
 8001758:	fb01 f202 	mul.w	r2, r1, r2
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4b80      	ldr	r3, [pc, #512]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001764:	5c9b      	ldrb	r3, [r3, r2]
 8001766:	3b30      	subs	r3, #48	; 0x30
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fef3 	bl	8000554 <__aeabi_i2d>
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b7e      	ldr	r3, [pc, #504]	; (800196c <GPS_GPRMC_Parse+0x814>)
 8001774:	f7fe ff58 	bl	8000628 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4b78      	ldr	r3, [pc, #480]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001782:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001786:	b2db      	uxtb	r3, r3
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	b2d1      	uxtb	r1, r2
 800178c:	4a75      	ldr	r2, [pc, #468]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800178e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001792:	4a75      	ldr	r2, [pc, #468]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001794:	fba2 1203 	umull	r1, r2, r2, r3
 8001798:	0912      	lsrs	r2, r2, #4
 800179a:	21fa      	movs	r1, #250	; 0xfa
 800179c:	fb01 f202 	mul.w	r2, r1, r2
 80017a0:	1a9b      	subs	r3, r3, r2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80017a8:	5c9b      	ldrb	r3, [r3, r2]
 80017aa:	3b30      	subs	r3, #48	; 0x30
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fed1 	bl	8000554 <__aeabi_i2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd7f 	bl	80002bc <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4967      	ldr	r1, [pc, #412]	; (8001960 <GPS_GPRMC_Parse+0x808>)
 80017c4:	680c      	ldr	r4, [r1, #0]
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9dd 	bl	8000b88 <__aeabi_d2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73a3      	strb	r3, [r4, #14]
		TAIL_INCREASE;		// "." geçtik
 80017d4:	4b63      	ldr	r3, [pc, #396]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80017d6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	3301      	adds	r3, #1
 80017de:	461a      	mov	r2, r3
 80017e0:	4b61      	ldr	r3, [pc, #388]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	091b      	lsrs	r3, r3, #4
 80017e8:	21fa      	movs	r1, #250	; 0xfa
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b5c      	ldr	r3, [pc, #368]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80017f4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
		_gps->longitudeSecond = ((TAIL_READ_P - ASCII_NUMBER) * 100.0 + (TAIL_READ_P - ASCII_NUMBER) * 10.0 + (TAIL_READ_P - ASCII_NUMBER) * 1.0) / 1000 * 60;
 80017f8:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80017fa:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	b2d1      	uxtb	r1, r2
 8001804:	4a57      	ldr	r2, [pc, #348]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001806:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800180a:	4a57      	ldr	r2, [pc, #348]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 800180c:	fba2 1203 	umull	r1, r2, r2, r3
 8001810:	0912      	lsrs	r2, r2, #4
 8001812:	21fa      	movs	r1, #250	; 0xfa
 8001814:	fb01 f202 	mul.w	r2, r1, r2
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	b2db      	uxtb	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4b51      	ldr	r3, [pc, #324]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001820:	5c9b      	ldrb	r3, [r3, r2]
 8001822:	3b30      	subs	r3, #48	; 0x30
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe95 	bl	8000554 <__aeabi_i2d>
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b50      	ldr	r3, [pc, #320]	; (8001970 <GPS_GPRMC_Parse+0x818>)
 8001830:	f7fe fefa 	bl	8000628 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4614      	mov	r4, r2
 800183a:	461d      	mov	r5, r3
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800183e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001842:	b2db      	uxtb	r3, r3
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	b2d1      	uxtb	r1, r2
 8001848:	4a46      	ldr	r2, [pc, #280]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800184a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800184e:	4a46      	ldr	r2, [pc, #280]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001850:	fba2 1203 	umull	r1, r2, r2, r3
 8001854:	0912      	lsrs	r2, r2, #4
 8001856:	21fa      	movs	r1, #250	; 0xfa
 8001858:	fb01 f202 	mul.w	r2, r1, r2
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	4b40      	ldr	r3, [pc, #256]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	3b30      	subs	r3, #48	; 0x30
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fe73 	bl	8000554 <__aeabi_i2d>
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <GPS_GPRMC_Parse+0x814>)
 8001874:	f7fe fed8 	bl	8000628 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4620      	mov	r0, r4
 800187e:	4629      	mov	r1, r5
 8001880:	f7fe fd1c 	bl	80002bc <__adddf3>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4614      	mov	r4, r2
 800188a:	461d      	mov	r5, r3
 800188c:	4b35      	ldr	r3, [pc, #212]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800188e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001892:	b2db      	uxtb	r3, r3
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	b2d1      	uxtb	r1, r2
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800189a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800189e:	4a32      	ldr	r2, [pc, #200]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 80018a0:	fba2 1203 	umull	r1, r2, r2, r3
 80018a4:	0912      	lsrs	r2, r2, #4
 80018a6:	21fa      	movs	r1, #250	; 0xfa
 80018a8:	fb01 f202 	mul.w	r2, r1, r2
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	3b30      	subs	r3, #48	; 0x30
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_i2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fcf9 	bl	80002bc <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	4b27      	ldr	r3, [pc, #156]	; (8001974 <GPS_GPRMC_Parse+0x81c>)
 80018d8:	f7fe ffd0 	bl	800087c <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <GPS_GPRMC_Parse+0x820>)
 80018ea:	f7fe fe9d 	bl	8000628 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	491b      	ldr	r1, [pc, #108]	; (8001960 <GPS_GPRMC_Parse+0x808>)
 80018f4:	680c      	ldr	r4, [r1, #0]
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f965 	bl	8000bc8 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	6123      	str	r3, [r4, #16]

		// yer yer bilgisi alır
		TAIL_INCREASE_TO_COMMA;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001904:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001908:	b2db      	uxtb	r3, r3
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	b2d1      	uxtb	r1, r2
 800190e:	4a15      	ldr	r2, [pc, #84]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001910:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001916:	fba2 1203 	umull	r1, r2, r2, r3
 800191a:	0912      	lsrs	r2, r2, #4
 800191c:	21fa      	movs	r1, #250	; 0xfa
 800191e:	fb01 f202 	mul.w	r2, r1, r2
 8001922:	1a9b      	subs	r3, r3, r2
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800192a:	5c9b      	ldrb	r3, [r3, r2]
 800192c:	2b2c      	cmp	r3, #44	; 0x2c
 800192e:	d1e8      	bne.n	8001902 <GPS_GPRMC_Parse+0x7aa>
			if(TAIL_READ_P == 'E')	_gps->locationLong = EAST;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001932:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001936:	b2db      	uxtb	r3, r3
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	b2d1      	uxtb	r1, r2
 800193c:	4a09      	ldr	r2, [pc, #36]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 800193e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <GPS_GPRMC_Parse+0x810>)
 8001944:	fba2 1203 	umull	r1, r2, r2, r3
 8001948:	0912      	lsrs	r2, r2, #4
 800194a:	21fa      	movs	r1, #250	; 0xfa
 800194c:	fb01 f202 	mul.w	r2, r1, r2
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4b03      	ldr	r3, [pc, #12]	; (8001964 <GPS_GPRMC_Parse+0x80c>)
 8001958:	5c9b      	ldrb	r3, [r3, r2]
 800195a:	2b45      	cmp	r3, #69	; 0x45
 800195c:	d113      	bne.n	8001986 <GPS_GPRMC_Parse+0x82e>
 800195e:	e00d      	b.n	800197c <GPS_GPRMC_Parse+0x824>
 8001960:	20000190 	.word	0x20000190
 8001964:	20000090 	.word	0x20000090
 8001968:	10624dd3 	.word	0x10624dd3
 800196c:	40240000 	.word	0x40240000
 8001970:	40590000 	.word	0x40590000
 8001974:	408f4000 	.word	0x408f4000
 8001978:	404e0000 	.word	0x404e0000
 800197c:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <GPS_GPRMC_Parse+0xa1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2202      	movs	r2, #2
 8001982:	751a      	strb	r2, [r3, #20]
 8001984:	e003      	b.n	800198e <GPS_GPRMC_Parse+0x836>
			else 					_gps->locationLong = WEST;
 8001986:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <GPS_GPRMC_Parse+0xa1c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2203      	movs	r2, #3
 800198c:	751a      	strb	r2, [r3, #20]

		TAIL_INCREASE_TO_COMMA;
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001990:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001994:	b2db      	uxtb	r3, r3
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	b2d1      	uxtb	r1, r2
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 800199c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80019a0:	4a76      	ldr	r2, [pc, #472]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 80019a2:	fba2 1203 	umull	r1, r2, r2, r3
 80019a6:	0912      	lsrs	r2, r2, #4
 80019a8:	21fa      	movs	r1, #250	; 0xfa
 80019aa:	fb01 f202 	mul.w	r2, r1, r2
 80019ae:	1a9b      	subs	r3, r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b70      	ldr	r3, [pc, #448]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 80019b6:	5c9b      	ldrb	r3, [r3, r2]
 80019b8:	2b2c      	cmp	r3, #44	; 0x2c
 80019ba:	d1e8      	bne.n	800198e <GPS_GPRMC_Parse+0x836>
		TAIL_INCREASE_TO_COMMA;
 80019bc:	4b6e      	ldr	r3, [pc, #440]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 80019be:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	4a6b      	ldr	r2, [pc, #428]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 80019ca:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80019ce:	4a6b      	ldr	r2, [pc, #428]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 80019d0:	fba2 1203 	umull	r1, r2, r2, r3
 80019d4:	0912      	lsrs	r2, r2, #4
 80019d6:	21fa      	movs	r1, #250	; 0xfa
 80019d8:	fb01 f202 	mul.w	r2, r1, r2
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 80019e4:	5c9b      	ldrb	r3, [r3, r2]
 80019e6:	2b2c      	cmp	r3, #44	; 0x2c
 80019e8:	d1e8      	bne.n	80019bc <GPS_GPRMC_Parse+0x864>
		TAIL_INCREASE_TO_COMMA;
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 80019ec:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	b2d1      	uxtb	r1, r2
 80019f6:	4a60      	ldr	r2, [pc, #384]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 80019f8:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80019fc:	4a5f      	ldr	r2, [pc, #380]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 80019fe:	fba2 1203 	umull	r1, r2, r2, r3
 8001a02:	0912      	lsrs	r2, r2, #4
 8001a04:	21fa      	movs	r1, #250	; 0xfa
 8001a06:	fb01 f202 	mul.w	r2, r1, r2
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	2b2c      	cmp	r3, #44	; 0x2c
 8001a16:	d1e8      	bne.n	80019ea <GPS_GPRMC_Parse+0x892>

		// Tarih bilgisini alır
		_gps->day = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a1a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	b2d1      	uxtb	r1, r2
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a26:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001a2a:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 8001a2c:	fba2 1203 	umull	r1, r2, r2, r3
 8001a30:	0912      	lsrs	r2, r2, #4
 8001a32:	21fa      	movs	r1, #250	; 0xfa
 8001a34:	fb01 f202 	mul.w	r2, r1, r2
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a40:	5c9b      	ldrb	r3, [r3, r2]
 8001a42:	461a      	mov	r2, r3
 8001a44:	0092      	lsls	r2, r2, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a4e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	b2c8      	uxtb	r0, r1
 8001a58:	4947      	ldr	r1, [pc, #284]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a5a:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001a5e:	4947      	ldr	r1, [pc, #284]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 8001a60:	fba1 0103 	umull	r0, r1, r1, r3
 8001a64:	0909      	lsrs	r1, r1, #4
 8001a66:	20fa      	movs	r0, #250	; 0xfa
 8001a68:	fb00 f101 	mul.w	r1, r0, r1
 8001a6c:	1a5b      	subs	r3, r3, r1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4619      	mov	r1, r3
 8001a72:	4b41      	ldr	r3, [pc, #260]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a74:	5c5b      	ldrb	r3, [r3, r1]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b3e      	ldr	r3, [pc, #248]	; (8001b74 <GPS_GPRMC_Parse+0xa1c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3a10      	subs	r2, #16
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	755a      	strb	r2, [r3, #21]
		_gps->month = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a86:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	b2d1      	uxtb	r1, r2
 8001a90:	4a39      	ldr	r2, [pc, #228]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001a92:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001a96:	4a39      	ldr	r2, [pc, #228]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 8001a98:	fba2 1203 	umull	r1, r2, r2, r3
 8001a9c:	0912      	lsrs	r2, r2, #4
 8001a9e:	21fa      	movs	r1, #250	; 0xfa
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
 8001aa4:	1a9b      	subs	r3, r3, r2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001aac:	5c9b      	ldrb	r3, [r3, r2]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001aba:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	1c59      	adds	r1, r3, #1
 8001ac2:	b2c8      	uxtb	r0, r1
 8001ac4:	492c      	ldr	r1, [pc, #176]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001ac6:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001aca:	492c      	ldr	r1, [pc, #176]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 8001acc:	fba1 0103 	umull	r0, r1, r1, r3
 8001ad0:	0909      	lsrs	r1, r1, #4
 8001ad2:	20fa      	movs	r0, #250	; 0xfa
 8001ad4:	fb00 f101 	mul.w	r1, r0, r1
 8001ad8:	1a5b      	subs	r3, r3, r1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001ae0:	5c5b      	ldrb	r3, [r3, r1]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <GPS_GPRMC_Parse+0xa1c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3a10      	subs	r2, #16
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	759a      	strb	r2, [r3, #22]
		_gps->year = 2000 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001af2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	b2d1      	uxtb	r1, r2
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001afe:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 8001b04:	fba2 1203 	umull	r1, r2, r2, r3
 8001b08:	0912      	lsrs	r2, r2, #4
 8001b0a:	21fa      	movs	r1, #250	; 0xfa
 8001b0c:	fb01 f202 	mul.w	r2, r1, r2
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001b18:	5c9b      	ldrb	r3, [r3, r2]
 8001b1a:	3b30      	subs	r3, #48	; 0x30
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001b2a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	b2c8      	uxtb	r0, r1
 8001b34:	4910      	ldr	r1, [pc, #64]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001b36:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001b3a:	4910      	ldr	r1, [pc, #64]	; (8001b7c <GPS_GPRMC_Parse+0xa24>)
 8001b3c:	fba1 0103 	umull	r0, r1, r1, r3
 8001b40:	0909      	lsrs	r1, r1, #4
 8001b42:	20fa      	movs	r0, #250	; 0xfa
 8001b44:	fb00 f101 	mul.w	r1, r0, r1
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <GPS_GPRMC_Parse+0xa20>)
 8001b50:	5c5b      	ldrb	r3, [r3, r1]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <GPS_GPRMC_Parse+0xa1c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f502 62f4 	add.w	r2, r2, #1952	; 0x7a0
 8001b60:	b292      	uxth	r2, r2
 8001b62:	831a      	strh	r2, [r3, #24]

		return _gps->gpsState;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <GPS_GPRMC_Parse+0xa1c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6c:	e000      	b.n	8001b70 <GPS_GPRMC_Parse+0xa18>
	}
	else	return WRONG_DATA;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bdb0      	pop	{r4, r5, r7, pc}
 8001b74:	20000190 	.word	0x20000190
 8001b78:	20000090 	.word	0x20000090
 8001b7c:	10624dd3 	.word	0x10624dd3

08001b80 <GPS_GPGGA_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPGGA verilerini çözer ve gps değerine atar	-uydu sayısı ve yükseklik-
 */
GPS_State GPS_GPGGA_Parse()
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 8001b84:	4b58      	ldr	r3, [pc, #352]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001b86:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b56      	ldr	r3, [pc, #344]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001b90:	4413      	add	r3, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fbc4 	bl	8002320 <GPS_CheckSumControl>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <GPS_GPGGA_Parse+0x22>
	{
		return WRONG_DATA;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1e2      	b.n	8001f68 <GPS_GPGGA_Parse+0x3e8>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;					// "GPGGA," sonrasına geçer
 8001ba2:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001ba4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	b2d1      	uxtb	r1, r2
 8001bae:	4a4e      	ldr	r2, [pc, #312]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001bb0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001bb6:	fba2 1203 	umull	r1, r2, r2, r3
 8001bba:	0912      	lsrs	r2, r2, #4
 8001bbc:	21fa      	movs	r1, #250	; 0xfa
 8001bbe:	fb01 f202 	mul.w	r2, r1, r2
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b2c      	cmp	r3, #44	; 0x2c
 8001bce:	d1e8      	bne.n	8001ba2 <GPS_GPGGA_Parse+0x22>
		TAIL_INCREASE_TO_COMMA;					// "tarih sonrasına geçer
 8001bd0:	4b45      	ldr	r3, [pc, #276]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001bd2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	b2d1      	uxtb	r1, r2
 8001bdc:	4a42      	ldr	r2, [pc, #264]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001bde:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001be2:	4a42      	ldr	r2, [pc, #264]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001be4:	fba2 1203 	umull	r1, r2, r2, r3
 8001be8:	0912      	lsrs	r2, r2, #4
 8001bea:	21fa      	movs	r1, #250	; 0xfa
 8001bec:	fb01 f202 	mul.w	r2, r1, r2
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b3c      	ldr	r3, [pc, #240]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001bf8:	5c9b      	ldrb	r3, [r3, r2]
 8001bfa:	2b2c      	cmp	r3, #44	; 0x2c
 8001bfc:	d1e8      	bne.n	8001bd0 <GPS_GPGGA_Parse+0x50>
		TAIL_INCREASE_TO_COMMA;					// enlem sonrasına geçer
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c00:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	b2d1      	uxtb	r1, r2
 8001c0a:	4a37      	ldr	r2, [pc, #220]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c0c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001c10:	4a36      	ldr	r2, [pc, #216]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001c12:	fba2 1203 	umull	r1, r2, r2, r3
 8001c16:	0912      	lsrs	r2, r2, #4
 8001c18:	21fa      	movs	r1, #250	; 0xfa
 8001c1a:	fb01 f202 	mul.w	r2, r1, r2
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	2b2c      	cmp	r3, #44	; 0x2c
 8001c2a:	d1e8      	bne.n	8001bfe <GPS_GPGGA_Parse+0x7e>
		TAIL_INCREASE_TO_COMMA;					// boylam sonrasına geçer
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c2e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	b2d1      	uxtb	r1, r2
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c3a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001c3e:	4a2b      	ldr	r2, [pc, #172]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001c40:	fba2 1203 	umull	r1, r2, r2, r3
 8001c44:	0912      	lsrs	r2, r2, #4
 8001c46:	21fa      	movs	r1, #250	; 0xfa
 8001c48:	fb01 f202 	mul.w	r2, r1, r2
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c54:	5c9b      	ldrb	r3, [r3, r2]
 8001c56:	2b2c      	cmp	r3, #44	; 0x2c
 8001c58:	d1e8      	bne.n	8001c2c <GPS_GPGGA_Parse+0xac>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin başına geçer
 8001c5a:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c5c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	b2d1      	uxtb	r1, r2
 8001c66:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c68:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001c6e:	fba2 1203 	umull	r1, r2, r2, r3
 8001c72:	0912      	lsrs	r2, r2, #4
 8001c74:	21fa      	movs	r1, #250	; 0xfa
 8001c76:	fb01 f202 	mul.w	r2, r1, r2
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c82:	5c9b      	ldrb	r3, [r3, r2]
 8001c84:	2b2c      	cmp	r3, #44	; 0x2c
 8001c86:	d1e8      	bne.n	8001c5a <GPS_GPGGA_Parse+0xda>
		TAIL_INCREASE_TO_COMMA;					// Boylam bölgesinin sonuna geçer
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c8a:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	b2d1      	uxtb	r1, r2
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001c96:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001c9c:	fba2 1203 	umull	r1, r2, r2, r3
 8001ca0:	0912      	lsrs	r2, r2, #4
 8001ca2:	21fa      	movs	r1, #250	; 0xfa
 8001ca4:	fb01 f202 	mul.w	r2, r1, r2
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001cb0:	5c9b      	ldrb	r3, [r3, r2]
 8001cb2:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb4:	d1e8      	bne.n	8001c88 <GPS_GPGGA_Parse+0x108>

		if(TAIL_READ == '0')					//GNSS Position Fix Indicator
 8001cb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001cb8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <GPS_GPGGA_Parse+0x16c>)
 8001cc0:	fba2 1203 	umull	r1, r2, r2, r3
 8001cc4:	0912      	lsrs	r2, r2, #4
 8001cc6:	21fa      	movs	r1, #250	; 0xfa
 8001cc8:	fb01 f202 	mul.w	r2, r1, r2
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <GPS_GPGGA_Parse+0x168>)
 8001cd4:	5c9b      	ldrb	r3, [r3, r2]
 8001cd6:	2b30      	cmp	r3, #48	; 0x30
 8001cd8:	d10c      	bne.n	8001cf4 <GPS_GPGGA_Parse+0x174>
		{
			_gps->gpsState = NO_CONNECTION;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <GPS_GPGGA_Parse+0x170>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			return NO_CONNECTION;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e13f      	b.n	8001f68 <GPS_GPGGA_Parse+0x3e8>
 8001ce8:	20000090 	.word	0x20000090
 8001cec:	10624dd3 	.word	0x10624dd3
 8001cf0:	20000190 	.word	0x20000190
		}
		else
			_gps->gpsState = POSITION_FIXED;
 8001cf4:	4b9d      	ldr	r3, [pc, #628]	; (8001f6c <GPS_GPGGA_Parse+0x3ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		if(TAIL_READ_P != 0)
 8001cfe:	4b9c      	ldr	r3, [pc, #624]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d00:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	b2d1      	uxtb	r1, r2
 8001d0a:	4a99      	ldr	r2, [pc, #612]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d0c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001d10:	4a98      	ldr	r2, [pc, #608]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001d12:	fba2 1203 	umull	r1, r2, r2, r3
 8001d16:	0912      	lsrs	r2, r2, #4
 8001d18:	21fa      	movs	r1, #250	; 0xfa
 8001d1a:	fb01 f202 	mul.w	r2, r1, r2
 8001d1e:	1a9b      	subs	r3, r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8119 	beq.w	8001f60 <GPS_GPGGA_Parse+0x3e0>
		{
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 8001d2e:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d30:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	b2d1      	uxtb	r1, r2
 8001d3a:	4a8d      	ldr	r2, [pc, #564]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d3c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001d40:	4a8c      	ldr	r2, [pc, #560]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001d42:	fba2 1203 	umull	r1, r2, r2, r3
 8001d46:	0912      	lsrs	r2, r2, #4
 8001d48:	21fa      	movs	r1, #250	; 0xfa
 8001d4a:	fb01 f202 	mul.w	r2, r1, r2
 8001d4e:	1a9b      	subs	r3, r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b86      	ldr	r3, [pc, #536]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	2b2c      	cmp	r3, #44	; 0x2c
 8001d5a:	d1e8      	bne.n	8001d2e <GPS_GPGGA_Parse+0x1ae>
			_gps->numberOfSatellite = (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 8001d5c:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d5e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	b2d1      	uxtb	r1, r2
 8001d68:	4a81      	ldr	r2, [pc, #516]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d6a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001d6e:	4a81      	ldr	r2, [pc, #516]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001d70:	fba2 1203 	umull	r1, r2, r2, r3
 8001d74:	0912      	lsrs	r2, r2, #4
 8001d76:	21fa      	movs	r1, #250	; 0xfa
 8001d78:	fb01 f202 	mul.w	r2, r1, r2
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d84:	5c9b      	ldrb	r3, [r3, r2]
 8001d86:	461a      	mov	r2, r3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b77      	ldr	r3, [pc, #476]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d92:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	1c59      	adds	r1, r3, #1
 8001d9a:	b2c8      	uxtb	r0, r1
 8001d9c:	4974      	ldr	r1, [pc, #464]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001d9e:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001da2:	4974      	ldr	r1, [pc, #464]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001da4:	fba1 0103 	umull	r0, r1, r1, r3
 8001da8:	0909      	lsrs	r1, r1, #4
 8001daa:	20fa      	movs	r0, #250	; 0xfa
 8001dac:	fb00 f101 	mul.w	r1, r0, r1
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001db8:	5c5b      	ldrb	r3, [r3, r1]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b6b      	ldr	r3, [pc, #428]	; (8001f6c <GPS_GPGGA_Parse+0x3ec>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	3a10      	subs	r2, #16
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	769a      	strb	r2, [r3, #26]

			TAIL_INCREASE_TO_COMMA;	// ",0.9" geçer
 8001dc8:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001dca:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	b2d1      	uxtb	r1, r2
 8001dd4:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001dd6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001ddc:	fba2 1203 	umull	r1, r2, r2, r3
 8001de0:	0912      	lsrs	r2, r2, #4
 8001de2:	21fa      	movs	r1, #250	; 0xfa
 8001de4:	fb01 f202 	mul.w	r2, r1, r2
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001df0:	5c9b      	ldrb	r3, [r3, r2]
 8001df2:	2b2c      	cmp	r3, #44	; 0x2c
 8001df4:	d1e8      	bne.n	8001dc8 <GPS_GPGGA_Parse+0x248>
			TAIL_INCREASE_TO_COMMA;	// "," geçer
 8001df6:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001df8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	b2d1      	uxtb	r1, r2
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e04:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001e08:	4a5a      	ldr	r2, [pc, #360]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001e0a:	fba2 1203 	umull	r1, r2, r2, r3
 8001e0e:	0912      	lsrs	r2, r2, #4
 8001e10:	21fa      	movs	r1, #250	; 0xfa
 8001e12:	fb01 f202 	mul.w	r2, r1, r2
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4b54      	ldr	r3, [pc, #336]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	2b2c      	cmp	r3, #44	; 0x2c
 8001e22:	d1e8      	bne.n	8001df6 <GPS_GPGGA_Parse+0x276>

			_gps->height = (TAIL_READ_P - ASCII_NUMBER) * 100 + (TAIL_READ_P - ASCII_NUMBER) * 10 + (TAIL_READ_P - ASCII_NUMBER);
 8001e24:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e26:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	b2d1      	uxtb	r1, r2
 8001e30:	4a4f      	ldr	r2, [pc, #316]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e32:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001e36:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001e38:	fba2 1203 	umull	r1, r2, r2, r3
 8001e3c:	0912      	lsrs	r2, r2, #4
 8001e3e:	21fa      	movs	r1, #250	; 0xfa
 8001e40:	fb01 f202 	mul.w	r2, r1, r2
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e4c:	5c9b      	ldrb	r3, [r3, r2]
 8001e4e:	3b30      	subs	r3, #48	; 0x30
 8001e50:	2264      	movs	r2, #100	; 0x64
 8001e52:	fb02 f103 	mul.w	r1, r2, r3
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e58:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	b2d0      	uxtb	r0, r2
 8001e62:	4a43      	ldr	r2, [pc, #268]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e64:	f882 00fa 	strb.w	r0, [r2, #250]	; 0xfa
 8001e68:	4a42      	ldr	r2, [pc, #264]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001e6a:	fba2 0203 	umull	r0, r2, r2, r3
 8001e6e:	0912      	lsrs	r2, r2, #4
 8001e70:	20fa      	movs	r0, #250	; 0xfa
 8001e72:	fb00 f202 	mul.w	r2, r0, r2
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e7e:	5c9b      	ldrb	r3, [r3, r2]
 8001e80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	18ca      	adds	r2, r1, r3
 8001e8e:	4b38      	ldr	r3, [pc, #224]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e90:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	1c59      	adds	r1, r3, #1
 8001e98:	b2c8      	uxtb	r0, r1
 8001e9a:	4935      	ldr	r1, [pc, #212]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001e9c:	f881 00fa 	strb.w	r0, [r1, #250]	; 0xfa
 8001ea0:	4934      	ldr	r1, [pc, #208]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001ea2:	fba1 0103 	umull	r0, r1, r1, r3
 8001ea6:	0909      	lsrs	r1, r1, #4
 8001ea8:	20fa      	movs	r0, #250	; 0xfa
 8001eaa:	fb00 f101 	mul.w	r1, r0, r1
 8001eae:	1a5b      	subs	r3, r3, r1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4b2e      	ldr	r3, [pc, #184]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001eb6:	5c5b      	ldrb	r3, [r3, r1]
 8001eb8:	3b30      	subs	r3, #48	; 0x30
 8001eba:	441a      	add	r2, r3
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <GPS_GPGGA_Parse+0x3ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	ee07 2a90 	vmov	s15, r2
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	edc3 7a07 	vstr	s15, [r3, #28]
			TAIL_INCREASE;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001ece:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001eda:	fba3 1302 	umull	r1, r3, r3, r2
 8001ede:	091b      	lsrs	r3, r3, #4
 8001ee0:	21fa      	movs	r1, #250	; 0xfa
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001eec:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
			_gps->height += (TAIL_READ_P - ASCII_NUMBER) / 10.0;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001ef2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	b2d1      	uxtb	r1, r2
 8001efc:	4a1c      	ldr	r2, [pc, #112]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001efe:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <GPS_GPGGA_Parse+0x3f4>)
 8001f04:	fba2 1203 	umull	r1, r2, r2, r3
 8001f08:	0912      	lsrs	r2, r2, #4
 8001f0a:	21fa      	movs	r1, #250	; 0xfa
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <GPS_GPGGA_Parse+0x3f0>)
 8001f18:	5c9b      	ldrb	r3, [r3, r2]
 8001f1a:	3b30      	subs	r3, #48	; 0x30
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fb19 	bl	8000554 <__aeabi_i2d>
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <GPS_GPGGA_Parse+0x3f8>)
 8001f28:	f7fe fca8 	bl	800087c <__aeabi_ddiv>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4614      	mov	r4, r2
 8001f32:	461d      	mov	r5, r3
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <GPS_GPGGA_Parse+0x3ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb1c 	bl	8000578 <__aeabi_f2d>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe f9b8 	bl	80002bc <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4906      	ldr	r1, [pc, #24]	; (8001f6c <GPS_GPGGA_Parse+0x3ec>)
 8001f52:	680c      	ldr	r4, [r1, #0]
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe36 	bl	8000bc8 <__aeabi_d2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	61e3      	str	r3, [r4, #28]
		}
		return _gps->gpsState;
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <GPS_GPGGA_Parse+0x3ec>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6c:	20000190 	.word	0x20000190
 8001f70:	20000090 	.word	0x20000090
 8001f74:	10624dd3 	.word	0x10624dd3
 8001f78:	40240000 	.word	0x40240000
 8001f7c:	00000000 	.word	0x00000000

08001f80 <GPS_GPVTG_Parse>:
/////////////////////////////////////////////////////////////
/*
 * GPVTG verilerini çözer ve gps değerine atar	-hız bilgisi-
 */
GPS_State GPS_GPVTG_Parse()
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
	if(!GPS_CheckSumControl(&ringBuff.rxGps[ringBuff.tail]))
 8001f86:	4b70      	ldr	r3, [pc, #448]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001f88:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001f92:	4413      	add	r3, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f9c3 	bl	8002320 <GPS_CheckSumControl>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <GPS_GPVTG_Parse+0x24>
	{
		return WRONG_DATA;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e1a7      	b.n	80022f4 <GPS_GPVTG_Parse+0x374>
	}
	else
	{
		TAIL_INCREASE_TO_COMMA;		// "GPVTG,"
 8001fa4:	4b68      	ldr	r3, [pc, #416]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001fa6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	b2d1      	uxtb	r1, r2
 8001fb0:	4a65      	ldr	r2, [pc, #404]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001fb2:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001fb6:	4a65      	ldr	r2, [pc, #404]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 8001fb8:	fba2 1203 	umull	r1, r2, r2, r3
 8001fbc:	0912      	lsrs	r2, r2, #4
 8001fbe:	21fa      	movs	r1, #250	; 0xfa
 8001fc0:	fb01 f202 	mul.w	r2, r1, r2
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001fcc:	5c9b      	ldrb	r3, [r3, r2]
 8001fce:	2b2c      	cmp	r3, #44	; 0x2c
 8001fd0:	d1e8      	bne.n	8001fa4 <GPS_GPVTG_Parse+0x24>
		TAIL_INCREASE_TO_COMMA;		//
 8001fd2:	4b5d      	ldr	r3, [pc, #372]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001fd4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	b2d1      	uxtb	r1, r2
 8001fde:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001fe0:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8001fe4:	4a59      	ldr	r2, [pc, #356]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 8001fe6:	fba2 1203 	umull	r1, r2, r2, r3
 8001fea:	0912      	lsrs	r2, r2, #4
 8001fec:	21fa      	movs	r1, #250	; 0xfa
 8001fee:	fb01 f202 	mul.w	r2, r1, r2
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8001ffa:	5c9b      	ldrb	r3, [r3, r2]
 8001ffc:	2b2c      	cmp	r3, #44	; 0x2c
 8001ffe:	d1e8      	bne.n	8001fd2 <GPS_GPVTG_Parse+0x52>
		TAIL_INCREASE_TO_COMMA;
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002002:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002006:	b2db      	uxtb	r3, r3
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	b2d1      	uxtb	r1, r2
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 800200e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8002012:	4a4e      	ldr	r2, [pc, #312]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 8002014:	fba2 1203 	umull	r1, r2, r2, r3
 8002018:	0912      	lsrs	r2, r2, #4
 800201a:	21fa      	movs	r1, #250	; 0xfa
 800201c:	fb01 f202 	mul.w	r2, r1, r2
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4b48      	ldr	r3, [pc, #288]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	2b2c      	cmp	r3, #44	; 0x2c
 800202c:	d1e8      	bne.n	8002000 <GPS_GPVTG_Parse+0x80>
		TAIL_INCREASE_TO_COMMA;
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002030:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002034:	b2db      	uxtb	r3, r3
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	b2d1      	uxtb	r1, r2
 800203a:	4a43      	ldr	r2, [pc, #268]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 800203c:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8002040:	4a42      	ldr	r2, [pc, #264]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 8002042:	fba2 1203 	umull	r1, r2, r2, r3
 8002046:	0912      	lsrs	r2, r2, #4
 8002048:	21fa      	movs	r1, #250	; 0xfa
 800204a:	fb01 f202 	mul.w	r2, r1, r2
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	4b3c      	ldr	r3, [pc, #240]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	2b2c      	cmp	r3, #44	; 0x2c
 800205a:	d1e8      	bne.n	800202e <GPS_GPVTG_Parse+0xae>
		TAIL_INCREASE_TO_COMMA;
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 800205e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002062:	b2db      	uxtb	r3, r3
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	b2d1      	uxtb	r1, r2
 8002068:	4a37      	ldr	r2, [pc, #220]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 800206a:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800206e:	4a37      	ldr	r2, [pc, #220]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 8002070:	fba2 1203 	umull	r1, r2, r2, r3
 8002074:	0912      	lsrs	r2, r2, #4
 8002076:	21fa      	movs	r1, #250	; 0xfa
 8002078:	fb01 f202 	mul.w	r2, r1, r2
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	4b31      	ldr	r3, [pc, #196]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	2b2c      	cmp	r3, #44	; 0x2c
 8002088:	d1e8      	bne.n	800205c <GPS_GPVTG_Parse+0xdc>
		TAIL_INCREASE_TO_COMMA;
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 800208c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002090:	b2db      	uxtb	r3, r3
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	b2d1      	uxtb	r1, r2
 8002096:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002098:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 800209c:	4a2b      	ldr	r2, [pc, #172]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 800209e:	fba2 1203 	umull	r1, r2, r2, r3
 80020a2:	0912      	lsrs	r2, r2, #4
 80020a4:	21fa      	movs	r1, #250	; 0xfa
 80020a6:	fb01 f202 	mul.w	r2, r1, r2
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	2b2c      	cmp	r3, #44	; 0x2c
 80020b6:	d1e8      	bne.n	800208a <GPS_GPVTG_Parse+0x10a>
		TAIL_INCREASE_TO_COMMA;
 80020b8:	4b23      	ldr	r3, [pc, #140]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020ba:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	b2d1      	uxtb	r1, r2
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020c6:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 80020cc:	fba2 1203 	umull	r1, r2, r2, r3
 80020d0:	0912      	lsrs	r2, r2, #4
 80020d2:	21fa      	movs	r1, #250	; 0xfa
 80020d4:	fb01 f202 	mul.w	r2, r1, r2
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	2b2c      	cmp	r3, #44	; 0x2c
 80020e4:	d1e8      	bne.n	80020b8 <GPS_GPVTG_Parse+0x138>

		uint8_t tailValue1 = ringBuff.tail;
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020e8:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80020ec:	71bb      	strb	r3, [r7, #6]
		TAIL_INCREASE_DOT;
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020f0:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	b2d1      	uxtb	r1, r2
 80020fa:	4a13      	ldr	r2, [pc, #76]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 80020fc:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <GPS_GPVTG_Parse+0x1cc>)
 8002102:	fba2 1203 	umull	r1, r2, r2, r3
 8002106:	0912      	lsrs	r2, r2, #4
 8002108:	21fa      	movs	r1, #250	; 0xfa
 800210a:	fb01 f202 	mul.w	r2, r1, r2
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002116:	5c9b      	ldrb	r3, [r3, r2]
 8002118:	2b2e      	cmp	r3, #46	; 0x2e
 800211a:	d1e8      	bne.n	80020ee <GPS_GPVTG_Parse+0x16e>
		uint8_t tailValue2 = ringBuff.tail;
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 800211e:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002122:	717b      	strb	r3, [r7, #5]

		signed char counter= tailValue2 - tailValue1 - 2;
 8002124:	797a      	ldrb	r2, [r7, #5]
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b02      	subs	r3, #2
 800212e:	b2db      	uxtb	r3, r3
 8002130:	71fb      	strb	r3, [r7, #7]
		ringBuff.tail = tailValue1;
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <GPS_GPVTG_Parse+0x1c8>)
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa
		_gps->speed = 0;
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <GPS_GPVTG_Parse+0x1d0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
		for(;counter >= 0; counter--)
 8002144:	e042      	b.n	80021cc <GPS_GPVTG_Parse+0x24c>
 8002146:	bf00      	nop
 8002148:	20000090 	.word	0x20000090
 800214c:	10624dd3 	.word	0x10624dd3
 8002150:	20000190 	.word	0x20000190
		{
			_gps->speed += (TAIL_READ - ASCII_NUMBER) * (uint32_t)pow(10,counter);
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002156:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 800215a:	b2db      	uxtb	r3, r3
 800215c:	4a6b      	ldr	r2, [pc, #428]	; (800230c <GPS_GPVTG_Parse+0x38c>)
 800215e:	fba2 1203 	umull	r1, r2, r2, r3
 8002162:	0912      	lsrs	r2, r2, #4
 8002164:	21fa      	movs	r1, #250	; 0xfa
 8002166:	fb01 f202 	mul.w	r2, r1, r2
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	4b65      	ldr	r3, [pc, #404]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002172:	5c9b      	ldrb	r3, [r3, r2]
 8002174:	3b30      	subs	r3, #48	; 0x30
 8002176:	461c      	mov	r4, r3
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9e9 	bl	8000554 <__aeabi_i2d>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	ec43 2b11 	vmov	d1, r2, r3
 800218a:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 8002300 <GPS_GPVTG_Parse+0x380>
 800218e:	f003 f983 	bl	8005498 <pow>
 8002192:	ec53 2b10 	vmov	r2, r3, d0
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fcf5 	bl	8000b88 <__aeabi_d2uiz>
 800219e:	4603      	mov	r3, r0
 80021a0:	fb03 f204 	mul.w	r2, r3, r4
 80021a4:	4b5a      	ldr	r3, [pc, #360]	; (8002310 <GPS_GPVTG_Parse+0x390>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80021ac:	ee07 2a90 	vmov	s15, r2
 80021b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b4:	4b56      	ldr	r3, [pc, #344]	; (8002310 <GPS_GPVTG_Parse+0x390>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	edc3 7a08 	vstr	s15, [r3, #32]
		for(;counter >= 0; counter--)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	dabf      	bge.n	8002154 <GPS_GPVTG_Parse+0x1d4>
		}
		ringBuff.tail = tailValue2;
 80021d4:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 80021d6:	797b      	ldrb	r3, [r7, #5]
 80021d8:	f882 30fa 	strb.w	r3, [r2, #250]	; 0xfa

		_gps->speed += (TAIL_READ_P - ASCII_NUMBER) / 10.0 + (TAIL_READ_P - ASCII_NUMBER) / 100.0 + (TAIL_READ_P - ASCII_NUMBER) / 1000.0;
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 80021de:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	b2d1      	uxtb	r1, r2
 80021e8:	4a47      	ldr	r2, [pc, #284]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 80021ea:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 80021ee:	4a47      	ldr	r2, [pc, #284]	; (800230c <GPS_GPVTG_Parse+0x38c>)
 80021f0:	fba2 1203 	umull	r1, r2, r2, r3
 80021f4:	0912      	lsrs	r2, r2, #4
 80021f6:	21fa      	movs	r1, #250	; 0xfa
 80021f8:	fb01 f202 	mul.w	r2, r1, r2
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	4b41      	ldr	r3, [pc, #260]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002204:	5c9b      	ldrb	r3, [r3, r2]
 8002206:	3b30      	subs	r3, #48	; 0x30
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f9a3 	bl	8000554 <__aeabi_i2d>
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	4b40      	ldr	r3, [pc, #256]	; (8002314 <GPS_GPVTG_Parse+0x394>)
 8002214:	f7fe fb32 	bl	800087c <__aeabi_ddiv>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4614      	mov	r4, r2
 800221e:	461d      	mov	r5, r3
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002222:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002226:	b2db      	uxtb	r3, r3
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	b2d1      	uxtb	r1, r2
 800222c:	4a36      	ldr	r2, [pc, #216]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 800222e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8002232:	4a36      	ldr	r2, [pc, #216]	; (800230c <GPS_GPVTG_Parse+0x38c>)
 8002234:	fba2 1203 	umull	r1, r2, r2, r3
 8002238:	0912      	lsrs	r2, r2, #4
 800223a:	21fa      	movs	r1, #250	; 0xfa
 800223c:	fb01 f202 	mul.w	r2, r1, r2
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002248:	5c9b      	ldrb	r3, [r3, r2]
 800224a:	3b30      	subs	r3, #48	; 0x30
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f981 	bl	8000554 <__aeabi_i2d>
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	4b30      	ldr	r3, [pc, #192]	; (8002318 <GPS_GPVTG_Parse+0x398>)
 8002258:	f7fe fb10 	bl	800087c <__aeabi_ddiv>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f82a 	bl	80002bc <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002272:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8002276:	b2db      	uxtb	r3, r3
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	b2d1      	uxtb	r1, r2
 800227c:	4a22      	ldr	r2, [pc, #136]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 800227e:	f882 10fa 	strb.w	r1, [r2, #250]	; 0xfa
 8002282:	4a22      	ldr	r2, [pc, #136]	; (800230c <GPS_GPVTG_Parse+0x38c>)
 8002284:	fba2 1203 	umull	r1, r2, r2, r3
 8002288:	0912      	lsrs	r2, r2, #4
 800228a:	21fa      	movs	r1, #250	; 0xfa
 800228c:	fb01 f202 	mul.w	r2, r1, r2
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <GPS_GPVTG_Parse+0x388>)
 8002298:	5c9b      	ldrb	r3, [r3, r2]
 800229a:	3b30      	subs	r3, #48	; 0x30
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f959 	bl	8000554 <__aeabi_i2d>
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <GPS_GPVTG_Parse+0x39c>)
 80022a8:	f7fe fae8 	bl	800087c <__aeabi_ddiv>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4620      	mov	r0, r4
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fe f802 	bl	80002bc <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4614      	mov	r4, r2
 80022be:	461d      	mov	r5, r3
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <GPS_GPVTG_Parse+0x390>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f956 	bl	8000578 <__aeabi_f2d>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4620      	mov	r0, r4
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd fff2 	bl	80002bc <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <GPS_GPVTG_Parse+0x390>)
 80022de:	680c      	ldr	r4, [r1, #0]
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc70 	bl	8000bc8 <__aeabi_d2f>
 80022e8:	4603      	mov	r3, r0
 80022ea:	6223      	str	r3, [r4, #32]

		return _gps->gpsState;
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <GPS_GPVTG_Parse+0x390>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	}
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bdb0      	pop	{r4, r5, r7, pc}
 80022fc:	f3af 8000 	nop.w
 8002300:	00000000 	.word	0x00000000
 8002304:	40240000 	.word	0x40240000
 8002308:	20000090 	.word	0x20000090
 800230c:	10624dd3 	.word	0x10624dd3
 8002310:	20000190 	.word	0x20000190
 8002314:	40240000 	.word	0x40240000
 8002318:	40590000 	.word	0x40590000
 800231c:	408f4000 	.word	0x408f4000

08002320 <GPS_CheckSumControl>:

/*
 * tüm değerleri XOR işlemine tabi tutarak bir checksum değeri üretir
 */
uint8_t GPS_CheckSumControl(uint8_t *ptr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
	int check = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
	char checHexa[5];

	while(ptr[i] != '*')
 8002330:	e00a      	b.n	8002348 <GPS_CheckSumControl+0x28>
	{
		check ^= ptr[i++];
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	617a      	str	r2, [r7, #20]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4053      	eors	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
	while(ptr[i] != '*')
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b2a      	cmp	r3, #42	; 0x2a
 8002352:	d1ee      	bne.n	8002332 <GPS_CheckSumControl+0x12>
	}
	sprintf(checHexa,"%x",check);
 8002354:	f107 0308 	add.w	r3, r7, #8
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	490d      	ldr	r1, [pc, #52]	; (8002390 <GPS_CheckSumControl+0x70>)
 800235c:	4618      	mov	r0, r3
 800235e:	f002 fc19 	bl	8004b94 <siprintf>
	return !strncmp((char*)&ptr[++i], checHexa,2);
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	3301      	adds	r3, #1
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	f107 0108 	add.w	r1, r7, #8
 8002372:	2202      	movs	r2, #2
 8002374:	4618      	mov	r0, r3
 8002376:	f002 fc2d 	bl	8004bd4 <strncmp>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf0c      	ite	eq
 8002380:	2301      	moveq	r3, #1
 8002382:	2300      	movne	r3, #0
 8002384:	b2db      	uxtb	r3, r3
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	08006300 	.word	0x08006300

08002394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239a:	f000 faa5 	bl	80028e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239e:	f000 f81b 	bl	80023d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a2:	f000 f8db 	bl	800255c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80023a6:	f000 f8af 	bl	8002508 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80023aa:	f000 f883 	bl	80024b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  GPS_Init(&huart1, &gps);
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <main+0x3c>)
 80023b0:	4808      	ldr	r0, [pc, #32]	; (80023d4 <main+0x40>)
 80023b2:	f7fe fddb 	bl	8000f6c <GPS_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(gps.gpsState == POSITION_FIXED && gps.day != 0)
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <main+0x3c>)
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d1fa      	bne.n	80023b6 <main+0x22>
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <main+0x3c>)
 80023c2:	7d5b      	ldrb	r3, [r3, #21]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f6      	beq.n	80023b6 <main+0x22>
	  {
		  int a = 10;
 80023c8:	230a      	movs	r3, #10
 80023ca:	607b      	str	r3, [r7, #4]
	  if(gps.gpsState == POSITION_FIXED && gps.day != 0)
 80023cc:	e7f3      	b.n	80023b6 <main+0x22>
 80023ce:	bf00      	nop
 80023d0:	2000021c 	.word	0x2000021c
 80023d4:	20000194 	.word	0x20000194

080023d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b094      	sub	sp, #80	; 0x50
 80023dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	2234      	movs	r2, #52	; 0x34
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fbcc 	bl	8004b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ec:	f107 0308 	add.w	r3, r7, #8
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <SystemClock_Config+0xd4>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	4a29      	ldr	r2, [pc, #164]	; (80024ac <SystemClock_Config+0xd4>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6413      	str	r3, [r2, #64]	; 0x40
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <SystemClock_Config+0xd4>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	607b      	str	r3, [r7, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002418:	2300      	movs	r3, #0
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <SystemClock_Config+0xd8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <SystemClock_Config+0xd8>)
 8002426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <SystemClock_Config+0xd8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002438:	2302      	movs	r3, #2
 800243a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800243c:	2301      	movs	r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002440:	2310      	movs	r3, #16
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002444:	2302      	movs	r3, #2
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800244c:	2310      	movs	r3, #16
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002450:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002454:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002456:	2304      	movs	r3, #4
 8002458:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800245a:	2302      	movs	r3, #2
 800245c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800245e:	2302      	movs	r3, #2
 8002460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4618      	mov	r0, r3
 8002468:	f001 f94c 	bl	8003704 <HAL_RCC_OscConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002472:	f000 f8e1 	bl	8002638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002476:	230f      	movs	r3, #15
 8002478:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800247a:	2302      	movs	r3, #2
 800247c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	2102      	movs	r1, #2
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fdec 	bl	8003070 <HAL_RCC_ClockConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800249e:	f000 f8cb 	bl	8002638 <Error_Handler>
  }
}
 80024a2:	bf00      	nop
 80024a4:	3750      	adds	r7, #80	; 0x50
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40007000 	.word	0x40007000

080024b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b8:	4b11      	ldr	r3, [pc, #68]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <MX_USART1_UART_Init+0x50>)
 80024bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024da:	220c      	movs	r2, #12
 80024dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_USART1_UART_Init+0x4c>)
 80024ec:	f001 fba8 	bl	8003c40 <HAL_UART_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024f6:	f000 f89f 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000194 	.word	0x20000194
 8002504:	40011000 	.word	0x40011000

08002508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 800250e:	4a12      	ldr	r2, [pc, #72]	; (8002558 <MX_USART2_UART_Init+0x50>)
 8002510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 8002514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 800252e:	220c      	movs	r2, #12
 8002530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_USART2_UART_Init+0x4c>)
 8002540:	f001 fb7e 	bl	8003c40 <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800254a:	f000 f875 	bl	8002638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200001d8 	.word	0x200001d8
 8002558:	40004400 	.word	0x40004400

0800255c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	609a      	str	r2, [r3, #8]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b2d      	ldr	r3, [pc, #180]	; (800262c <MX_GPIO_Init+0xd0>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	4a2c      	ldr	r2, [pc, #176]	; (800262c <MX_GPIO_Init+0xd0>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	6313      	str	r3, [r2, #48]	; 0x30
 8002582:	4b2a      	ldr	r3, [pc, #168]	; (800262c <MX_GPIO_Init+0xd0>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <MX_GPIO_Init+0xd0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <MX_GPIO_Init+0xd0>)
 8002598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <MX_GPIO_Init+0xd0>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <MX_GPIO_Init+0xd0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a1e      	ldr	r2, [pc, #120]	; (800262c <MX_GPIO_Init+0xd0>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <MX_GPIO_Init+0xd0>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_GPIO_Init+0xd0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <MX_GPIO_Init+0xd0>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_GPIO_Init+0xd0>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	2120      	movs	r1, #32
 80025e6:	4812      	ldr	r0, [pc, #72]	; (8002630 <MX_GPIO_Init+0xd4>)
 80025e8:	f000 fd28 	bl	800303c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	480c      	ldr	r0, [pc, #48]	; (8002634 <MX_GPIO_Init+0xd8>)
 8002604:	f000 fb86 	bl	8002d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002608:	2320      	movs	r3, #32
 800260a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4619      	mov	r1, r3
 800261e:	4804      	ldr	r0, [pc, #16]	; (8002630 <MX_GPIO_Init+0xd4>)
 8002620:	f000 fb78 	bl	8002d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002624:	bf00      	nop
 8002626:	3728      	adds	r7, #40	; 0x28
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000
 8002634:	40020800 	.word	0x40020800

08002638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800263c:	b672      	cpsid	i
}
 800263e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002640:	e7fe      	b.n	8002640 <Error_Handler+0x8>
	...

08002644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_MspInit+0x4c>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <HAL_MspInit+0x4c>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_MspInit+0x4c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_MspInit+0x4c>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <HAL_MspInit+0x4c>)
 8002670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_MspInit+0x4c>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002682:	2007      	movs	r0, #7
 8002684:	f000 fa72 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800

08002694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a36      	ldr	r2, [pc, #216]	; (800278c <HAL_UART_MspInit+0xf8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d135      	bne.n	8002722 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <HAL_UART_MspInit+0xfc>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <HAL_UART_MspInit+0xfc>)
 80026c0:	f043 0310 	orr.w	r3, r3, #16
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_UART_MspInit+0xfc>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	4b2e      	ldr	r3, [pc, #184]	; (8002790 <HAL_UART_MspInit+0xfc>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a2d      	ldr	r2, [pc, #180]	; (8002790 <HAL_UART_MspInit+0xfc>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_UART_MspInit+0xfc>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002700:	2307      	movs	r3, #7
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	4619      	mov	r1, r3
 800270a:	4822      	ldr	r0, [pc, #136]	; (8002794 <HAL_UART_MspInit+0x100>)
 800270c:	f000 fb02 	bl	8002d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2025      	movs	r0, #37	; 0x25
 8002716:	f000 fa34 	bl	8002b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800271a:	2025      	movs	r0, #37	; 0x25
 800271c:	f000 fa4d 	bl	8002bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002720:	e030      	b.n	8002784 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1c      	ldr	r2, [pc, #112]	; (8002798 <HAL_UART_MspInit+0x104>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d12b      	bne.n	8002784 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_UART_MspInit+0xfc>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	4a16      	ldr	r2, [pc, #88]	; (8002790 <HAL_UART_MspInit+0xfc>)
 8002736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800273a:	6413      	str	r3, [r2, #64]	; 0x40
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_UART_MspInit+0xfc>)
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_UART_MspInit+0xfc>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <HAL_UART_MspInit+0xfc>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6313      	str	r3, [r2, #48]	; 0x30
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <HAL_UART_MspInit+0xfc>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002764:	230c      	movs	r3, #12
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002774:	2307      	movs	r3, #7
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4805      	ldr	r0, [pc, #20]	; (8002794 <HAL_UART_MspInit+0x100>)
 8002780:	f000 fac8 	bl	8002d14 <HAL_GPIO_Init>
}
 8002784:	bf00      	nop
 8002786:	3730      	adds	r7, #48	; 0x30
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40011000 	.word	0x40011000
 8002790:	40023800 	.word	0x40023800
 8002794:	40020000 	.word	0x40020000
 8002798:	40004400 	.word	0x40004400

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e8:	f000 f8d0 	bl	800298c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <USART1_IRQHandler+0x10>)
 80027f6:	f001 faa1 	bl	8003d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000194 	.word	0x20000194

08002804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <_sbrk+0x5c>)
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <_sbrk+0x60>)
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002818:	4b13      	ldr	r3, [pc, #76]	; (8002868 <_sbrk+0x64>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <_sbrk+0x64>)
 8002822:	4a12      	ldr	r2, [pc, #72]	; (800286c <_sbrk+0x68>)
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d207      	bcs.n	8002844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002834:	f002 f97c 	bl	8004b30 <__errno>
 8002838:	4603      	mov	r3, r0
 800283a:	220c      	movs	r2, #12
 800283c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
 8002842:	e009      	b.n	8002858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <_sbrk+0x64>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <_sbrk+0x64>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <_sbrk+0x64>)
 8002854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20020000 	.word	0x20020000
 8002864:	00000400 	.word	0x00000400
 8002868:	20000244 	.word	0x20000244
 800286c:	20000260 	.word	0x20000260

08002870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <SystemInit+0x20>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	4a05      	ldr	r2, [pc, #20]	; (8002890 <SystemInit+0x20>)
 800287c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002898:	480d      	ldr	r0, [pc, #52]	; (80028d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800289a:	490e      	ldr	r1, [pc, #56]	; (80028d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a0:	e002      	b.n	80028a8 <LoopCopyDataInit>

080028a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a6:	3304      	adds	r3, #4

080028a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ac:	d3f9      	bcc.n	80028a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ae:	4a0b      	ldr	r2, [pc, #44]	; (80028dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028b0:	4c0b      	ldr	r4, [pc, #44]	; (80028e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b4:	e001      	b.n	80028ba <LoopFillZerobss>

080028b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b8:	3204      	adds	r2, #4

080028ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028bc:	d3fb      	bcc.n	80028b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028be:	f7ff ffd7 	bl	8002870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028c2:	f002 f93b 	bl	8004b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028c6:	f7ff fd65 	bl	8002394 <main>
  bx  lr    
 80028ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80028d8:	08006390 	.word	0x08006390
  ldr r2, =_sbss
 80028dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80028e0:	2000025c 	.word	0x2000025c

080028e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e4:	e7fe      	b.n	80028e4 <ADC_IRQHandler>
	...

080028e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_Init+0x40>)
 80028f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_Init+0x40>)
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_Init+0x40>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002910:	2003      	movs	r0, #3
 8002912:	f000 f92b 	bl	8002b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002916:	2000      	movs	r0, #0
 8002918:	f000 f808 	bl	800292c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800291c:	f7ff fe92 	bl	8002644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00

0800292c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_InitTick+0x54>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_InitTick+0x58>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002942:	fbb3 f3f1 	udiv	r3, r3, r1
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f943 	bl	8002bd6 <HAL_SYSTICK_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00e      	b.n	8002978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d80a      	bhi.n	8002976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f000 f90b 	bl	8002b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800296c:	4a06      	ldr	r2, [pc, #24]	; (8002988 <HAL_InitTick+0x5c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000000 	.word	0x20000000
 8002984:	20000008 	.word	0x20000008
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008
 80029b0:	20000248 	.word	0x20000248

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000248 	.word	0x20000248

080029cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e8:	4013      	ands	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x44>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <__NVIC_GetPriorityGrouping+0x18>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	0a1b      	lsrs	r3, r3, #8
 8002a1e:	f003 0307 	and.w	r3, r3, #7
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	db0b      	blt.n	8002a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	f003 021f 	and.w	r2, r3, #31
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <__NVIC_EnableIRQ+0x38>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2001      	movs	r0, #1
 8002a52:	fa00 f202 	lsl.w	r2, r0, r2
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000e100 	.word	0xe000e100

08002a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	; (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f1c3 0307 	rsb	r3, r3, #7
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	bf28      	it	cs
 8002ade:	2304      	movcs	r3, #4
 8002ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	2b06      	cmp	r3, #6
 8002ae8:	d902      	bls.n	8002af0 <NVIC_EncodePriority+0x30>
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3b03      	subs	r3, #3
 8002aee:	e000      	b.n	8002af2 <NVIC_EncodePriority+0x32>
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	401a      	ands	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b08:	f04f 31ff 	mov.w	r1, #4294967295
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43d9      	mvns	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	4313      	orrs	r3, r2
         );
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3724      	adds	r7, #36	; 0x24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b38:	d301      	bcc.n	8002b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e00f      	b.n	8002b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <SysTick_Config+0x40>)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b46:	210f      	movs	r1, #15
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	f7ff ff8e 	bl	8002a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <SysTick_Config+0x40>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <SysTick_Config+0x40>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	e000e010 	.word	0xe000e010

08002b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff ff29 	bl	80029cc <__NVIC_SetPriorityGrouping>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b94:	f7ff ff3e 	bl	8002a14 <__NVIC_GetPriorityGrouping>
 8002b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	6978      	ldr	r0, [r7, #20]
 8002ba0:	f7ff ff8e 	bl	8002ac0 <NVIC_EncodePriority>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff5d 	bl	8002a6c <__NVIC_SetPriority>
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff31 	bl	8002a30 <__NVIC_EnableIRQ>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffa2 	bl	8002b28 <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff feda 	bl	80029b4 <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d008      	beq.n	8002c20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e052      	b.n	8002cc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0216 	bic.w	r2, r2, #22
 8002c2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_DMA_Abort+0x62>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0208 	bic.w	r2, r2, #8
 8002c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c70:	e013      	b.n	8002c9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c72:	f7ff fe9f 	bl	80029b4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b05      	cmp	r3, #5
 8002c7e:	d90c      	bls.n	8002c9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2203      	movs	r2, #3
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e015      	b.n	8002cc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e4      	bne.n	8002c72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	223f      	movs	r2, #63	; 0x3f
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d004      	beq.n	8002cec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2280      	movs	r2, #128	; 0x80
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e00c      	b.n	8002d06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2205      	movs	r2, #5
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e165      	b.n	8002ffc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8154 	bne.w	8002ff6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d017      	beq.n	8002e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d123      	bne.n	8002e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80ae 	beq.w	8002ff6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a5c      	ldr	r2, [pc, #368]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b5a      	ldr	r3, [pc, #360]	; (8003014 <HAL_GPIO_Init+0x300>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eb6:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_GPIO_Init+0x304>)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4f      	ldr	r2, [pc, #316]	; (800301c <HAL_GPIO_Init+0x308>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d025      	beq.n	8002f2e <HAL_GPIO_Init+0x21a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4e      	ldr	r2, [pc, #312]	; (8003020 <HAL_GPIO_Init+0x30c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01f      	beq.n	8002f2a <HAL_GPIO_Init+0x216>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4d      	ldr	r2, [pc, #308]	; (8003024 <HAL_GPIO_Init+0x310>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d019      	beq.n	8002f26 <HAL_GPIO_Init+0x212>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	; (8003028 <HAL_GPIO_Init+0x314>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0x20e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4b      	ldr	r2, [pc, #300]	; (800302c <HAL_GPIO_Init+0x318>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <HAL_GPIO_Init+0x20a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_GPIO_Init+0x31c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d007      	beq.n	8002f1a <HAL_GPIO_Init+0x206>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a49      	ldr	r2, [pc, #292]	; (8003034 <HAL_GPIO_Init+0x320>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_GPIO_Init+0x202>
 8002f12:	2306      	movs	r3, #6
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f16:	2307      	movs	r3, #7
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x21c>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <HAL_GPIO_Init+0x304>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b3a      	ldr	r3, [pc, #232]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a31      	ldr	r2, [pc, #196]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b2f      	ldr	r3, [pc, #188]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a26      	ldr	r2, [pc, #152]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff0:	4a11      	ldr	r2, [pc, #68]	; (8003038 <HAL_GPIO_Init+0x324>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	f67f ae96 	bls.w	8002d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40013c00 	.word	0x40013c00

0800303c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
 8003048:	4613      	mov	r3, r2
 800304a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800304c:	787b      	ldrb	r3, [r7, #1]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003052:	887a      	ldrh	r2, [r7, #2]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003058:	e003      	b.n	8003062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305a:	887b      	ldrh	r3, [r7, #2]
 800305c:	041a      	lsls	r2, r3, #16
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	619a      	str	r2, [r3, #24]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cc      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d044      	beq.n	8003190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e067      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4934      	ldr	r1, [pc, #208]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003160:	f7ff fc28 	bl	80029b4 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7ff fc24 	bl	80029b4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20c      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f855 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490a      	ldr	r1, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fb88 	bl	800292c <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	08006304 	.word	0x08006304
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	; (8003274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	; (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	08006314 	.word	0x08006314

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003280:	f7ff ffdc 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0b5b      	lsrs	r3, r3, #13
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08006314 	.word	0x08006314

080032a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b0ae      	sub	sp, #184	; 0xb8
 80032aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ca:	4bcb      	ldr	r3, [pc, #812]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	f200 8206 	bhi.w	80036e4 <HAL_RCC_GetSysClockFreq+0x440>
 80032d8:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80032da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032de:	bf00      	nop
 80032e0:	08003315 	.word	0x08003315
 80032e4:	080036e5 	.word	0x080036e5
 80032e8:	080036e5 	.word	0x080036e5
 80032ec:	080036e5 	.word	0x080036e5
 80032f0:	0800331d 	.word	0x0800331d
 80032f4:	080036e5 	.word	0x080036e5
 80032f8:	080036e5 	.word	0x080036e5
 80032fc:	080036e5 	.word	0x080036e5
 8003300:	08003325 	.word	0x08003325
 8003304:	080036e5 	.word	0x080036e5
 8003308:	080036e5 	.word	0x080036e5
 800330c:	080036e5 	.word	0x080036e5
 8003310:	08003515 	.word	0x08003515
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003314:	4bb9      	ldr	r3, [pc, #740]	; (80035fc <HAL_RCC_GetSysClockFreq+0x358>)
 8003316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800331a:	e1e7      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800331c:	4bb8      	ldr	r3, [pc, #736]	; (8003600 <HAL_RCC_GetSysClockFreq+0x35c>)
 800331e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003322:	e1e3      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003324:	4bb4      	ldr	r3, [pc, #720]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003330:	4bb1      	ldr	r3, [pc, #708]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d071      	beq.n	8003420 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333c:	4bae      	ldr	r3, [pc, #696]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	2200      	movs	r2, #0
 8003344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003348:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800334c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800335e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003362:	4622      	mov	r2, r4
 8003364:	462b      	mov	r3, r5
 8003366:	f04f 0000 	mov.w	r0, #0
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	0159      	lsls	r1, r3, #5
 8003370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003374:	0150      	lsls	r0, r2, #5
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4621      	mov	r1, r4
 800337c:	1a51      	subs	r1, r2, r1
 800337e:	6439      	str	r1, [r7, #64]	; 0x40
 8003380:	4629      	mov	r1, r5
 8003382:	eb63 0301 	sbc.w	r3, r3, r1
 8003386:	647b      	str	r3, [r7, #68]	; 0x44
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003394:	4649      	mov	r1, r9
 8003396:	018b      	lsls	r3, r1, #6
 8003398:	4641      	mov	r1, r8
 800339a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800339e:	4641      	mov	r1, r8
 80033a0:	018a      	lsls	r2, r1, #6
 80033a2:	4641      	mov	r1, r8
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80033a8:	4649      	mov	r1, r9
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80033bc:	4649      	mov	r1, r9
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	4641      	mov	r1, r8
 80033c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c6:	4641      	mov	r1, r8
 80033c8:	00ca      	lsls	r2, r1, #3
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	4622      	mov	r2, r4
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
 80033d6:	462b      	mov	r3, r5
 80033d8:	460a      	mov	r2, r1
 80033da:	eb42 0303 	adc.w	r3, r2, r3
 80033de:	637b      	str	r3, [r7, #52]	; 0x34
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ec:	4629      	mov	r1, r5
 80033ee:	024b      	lsls	r3, r1, #9
 80033f0:	4621      	mov	r1, r4
 80033f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033f6:	4621      	mov	r1, r4
 80033f8:	024a      	lsls	r2, r1, #9
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800340c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003410:	f7fd fc2a 	bl	8000c68 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800341e:	e067      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003420:	4b75      	ldr	r3, [pc, #468]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	099b      	lsrs	r3, r3, #6
 8003426:	2200      	movs	r2, #0
 8003428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800342c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003438:	67bb      	str	r3, [r7, #120]	; 0x78
 800343a:	2300      	movs	r3, #0
 800343c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800343e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003442:	4622      	mov	r2, r4
 8003444:	462b      	mov	r3, r5
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	0159      	lsls	r1, r3, #5
 8003450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003454:	0150      	lsls	r0, r2, #5
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4621      	mov	r1, r4
 800345c:	1a51      	subs	r1, r2, r1
 800345e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003460:	4629      	mov	r1, r5
 8003462:	eb63 0301 	sbc.w	r3, r3, r1
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003474:	4649      	mov	r1, r9
 8003476:	018b      	lsls	r3, r1, #6
 8003478:	4641      	mov	r1, r8
 800347a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800347e:	4641      	mov	r1, r8
 8003480:	018a      	lsls	r2, r1, #6
 8003482:	4641      	mov	r1, r8
 8003484:	ebb2 0a01 	subs.w	sl, r2, r1
 8003488:	4649      	mov	r1, r9
 800348a:	eb63 0b01 	sbc.w	fp, r3, r1
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800349a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800349e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034a2:	4692      	mov	sl, r2
 80034a4:	469b      	mov	fp, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	eb1a 0303 	adds.w	r3, sl, r3
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	462b      	mov	r3, r5
 80034b0:	eb4b 0303 	adc.w	r3, fp, r3
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80034c2:	4629      	mov	r1, r5
 80034c4:	028b      	lsls	r3, r1, #10
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034cc:	4621      	mov	r1, r4
 80034ce:	028a      	lsls	r2, r1, #10
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034d8:	2200      	movs	r2, #0
 80034da:	673b      	str	r3, [r7, #112]	; 0x70
 80034dc:	677a      	str	r2, [r7, #116]	; 0x74
 80034de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034e2:	f7fd fbc1 	bl	8000c68 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4613      	mov	r3, r2
 80034ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f0:	4b41      	ldr	r3, [pc, #260]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	3301      	adds	r3, #1
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003512:	e0eb      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003514:	4b38      	ldr	r3, [pc, #224]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800351c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003520:	4b35      	ldr	r3, [pc, #212]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d06b      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	099b      	lsrs	r3, r3, #6
 8003532:	2200      	movs	r2, #0
 8003534:	66bb      	str	r3, [r7, #104]	; 0x68
 8003536:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003538:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800353e:	663b      	str	r3, [r7, #96]	; 0x60
 8003540:	2300      	movs	r3, #0
 8003542:	667b      	str	r3, [r7, #100]	; 0x64
 8003544:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003548:	4622      	mov	r2, r4
 800354a:	462b      	mov	r3, r5
 800354c:	f04f 0000 	mov.w	r0, #0
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	0159      	lsls	r1, r3, #5
 8003556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355a:	0150      	lsls	r0, r2, #5
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4621      	mov	r1, r4
 8003562:	1a51      	subs	r1, r2, r1
 8003564:	61b9      	str	r1, [r7, #24]
 8003566:	4629      	mov	r1, r5
 8003568:	eb63 0301 	sbc.w	r3, r3, r1
 800356c:	61fb      	str	r3, [r7, #28]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800357a:	4659      	mov	r1, fp
 800357c:	018b      	lsls	r3, r1, #6
 800357e:	4651      	mov	r1, sl
 8003580:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003584:	4651      	mov	r1, sl
 8003586:	018a      	lsls	r2, r1, #6
 8003588:	4651      	mov	r1, sl
 800358a:	ebb2 0801 	subs.w	r8, r2, r1
 800358e:	4659      	mov	r1, fp
 8003590:	eb63 0901 	sbc.w	r9, r3, r1
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035a8:	4690      	mov	r8, r2
 80035aa:	4699      	mov	r9, r3
 80035ac:	4623      	mov	r3, r4
 80035ae:	eb18 0303 	adds.w	r3, r8, r3
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	462b      	mov	r3, r5
 80035b6:	eb49 0303 	adc.w	r3, r9, r3
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80035c8:	4629      	mov	r1, r5
 80035ca:	024b      	lsls	r3, r1, #9
 80035cc:	4621      	mov	r1, r4
 80035ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d2:	4621      	mov	r1, r4
 80035d4:	024a      	lsls	r2, r1, #9
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035de:	2200      	movs	r2, #0
 80035e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80035e2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80035e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035e8:	f7fd fb3e 	bl	8000c68 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f6:	e065      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x420>
 80035f8:	40023800 	.word	0x40023800
 80035fc:	00f42400 	.word	0x00f42400
 8003600:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCC_GetSysClockFreq+0x458>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	2200      	movs	r2, #0
 800360c:	4618      	mov	r0, r3
 800360e:	4611      	mov	r1, r2
 8003610:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003614:	653b      	str	r3, [r7, #80]	; 0x50
 8003616:	2300      	movs	r3, #0
 8003618:	657b      	str	r3, [r7, #84]	; 0x54
 800361a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800361e:	4642      	mov	r2, r8
 8003620:	464b      	mov	r3, r9
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	0159      	lsls	r1, r3, #5
 800362c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003630:	0150      	lsls	r0, r2, #5
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4641      	mov	r1, r8
 8003638:	1a51      	subs	r1, r2, r1
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	4649      	mov	r1, r9
 800363e:	eb63 0301 	sbc.w	r3, r3, r1
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003650:	4659      	mov	r1, fp
 8003652:	018b      	lsls	r3, r1, #6
 8003654:	4651      	mov	r1, sl
 8003656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800365a:	4651      	mov	r1, sl
 800365c:	018a      	lsls	r2, r1, #6
 800365e:	4651      	mov	r1, sl
 8003660:	1a54      	subs	r4, r2, r1
 8003662:	4659      	mov	r1, fp
 8003664:	eb63 0501 	sbc.w	r5, r3, r1
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	464b      	mov	r3, r9
 8003684:	eb45 0303 	adc.w	r3, r5, r3
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ac:	2200      	movs	r2, #0
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80036b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036b6:	f7fd fad7 	bl	8000c68 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4613      	mov	r3, r2
 80036c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCC_GetSysClockFreq+0x458>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	0f1b      	lsrs	r3, r3, #28
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80036d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036e2:	e003      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_GetSysClockFreq+0x45c>)
 80036e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80036ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	37b8      	adds	r7, #184	; 0xb8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800
 8003700:	00f42400 	.word	0x00f42400

08003704 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e28d      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8083 	beq.w	800382a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003724:	4b94      	ldr	r3, [pc, #592]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b04      	cmp	r3, #4
 800372e:	d019      	beq.n	8003764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003730:	4b91      	ldr	r3, [pc, #580]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003738:	2b08      	cmp	r3, #8
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800373c:	4b8e      	ldr	r3, [pc, #568]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003748:	d00c      	beq.n	8003764 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b8b      	ldr	r3, [pc, #556]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d112      	bne.n	800377c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003762:	d10b      	bne.n	800377c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05b      	beq.n	8003828 <HAL_RCC_OscConfig+0x124>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d157      	bne.n	8003828 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e25a      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x90>
 8003786:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7b      	ldr	r2, [pc, #492]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e01d      	b.n	80037d0 <HAL_RCC_OscConfig+0xcc>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0xb4>
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	4b73      	ldr	r3, [pc, #460]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a72      	ldr	r2, [pc, #456]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0xcc>
 80037b8:	4b6f      	ldr	r3, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a6e      	ldr	r2, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b6c      	ldr	r3, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6b      	ldr	r2, [pc, #428]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d013      	beq.n	8003800 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7ff f8ec 	bl	80029b4 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff f8e8 	bl	80029b4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e21f      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0xdc>
 80037fe:	e014      	b.n	800382a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff f8d8 	bl	80029b4 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff f8d4 	bl	80029b4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e20b      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x104>
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d06f      	beq.n	8003916 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003842:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800384a:	2b08      	cmp	r3, #8
 800384c:	d105      	bne.n	800385a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d11c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x186>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1d3      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4937      	ldr	r1, [pc, #220]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x278>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7ff f881 	bl	80029b4 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b6:	f7ff f87d 	bl	80029b4 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1b4      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4925      	ldr	r1, [pc, #148]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x278>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7ff f860 	bl	80029b4 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f8:	f7ff f85c 	bl	80029b4 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e193      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d036      	beq.n	8003990 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x27c>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7ff f840 	bl	80029b4 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003938:	f7ff f83c 	bl	80029b4 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e173      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x274>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x234>
 8003956:	e01b      	b.n	8003990 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x27c>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7ff f829 	bl	80029b4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	e00e      	b.n	8003984 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003966:	f7ff f825 	bl	80029b4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d907      	bls.n	8003984 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e15c      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	4b8a      	ldr	r3, [pc, #552]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ea      	bne.n	8003966 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8097 	beq.w	8003acc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b83      	ldr	r3, [pc, #524]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b7f      	ldr	r3, [pc, #508]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a7e      	ldr	r2, [pc, #504]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b7c      	ldr	r3, [pc, #496]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a75      	ldr	r2, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fe ffe5 	bl	80029b4 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe ffe1 	bl	80029b4 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e118      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b6c      	ldr	r3, [pc, #432]	; (8003bb4 <HAL_RCC_OscConfig+0x4b0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x31e>
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a65      	ldr	r2, [pc, #404]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	e01c      	b.n	8003a5c <HAL_RCC_OscConfig+0x358>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x340>
 8003a2a:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a5d      	ldr	r2, [pc, #372]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0x358>
 8003a44:	4b5a      	ldr	r3, [pc, #360]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a59      	ldr	r2, [pc, #356]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	4b57      	ldr	r3, [pc, #348]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a56      	ldr	r2, [pc, #344]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	f023 0304 	bic.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7fe ffa6 	bl	80029b4 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe ffa2 	bl	80029b4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0d7      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	4b4b      	ldr	r3, [pc, #300]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RCC_OscConfig+0x368>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe ff90 	bl	80029b4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe ff8c 	bl	80029b4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0c1      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b3b      	ldr	r3, [pc, #236]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a3a      	ldr	r2, [pc, #232]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80ad 	beq.w	8003c30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d060      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d145      	bne.n	8003b76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b33      	ldr	r3, [pc, #204]	; (8003bb8 <HAL_RCC_OscConfig+0x4b4>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe ff60 	bl	80029b4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fe ff5c 	bl	80029b4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e093      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	071b      	lsls	r3, r3, #28
 8003b42:	491b      	ldr	r1, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x4b4>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fe ff31 	bl	80029b4 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fe ff2d 	bl	80029b4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e064      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x452>
 8003b74:	e05c      	b.n	8003c30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RCC_OscConfig+0x4b4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe ff1a 	bl	80029b4 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe ff16 	bl	80029b4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e04d      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x480>
 8003ba2:	e045      	b.n	8003c30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e040      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40007000 	.word	0x40007000
 8003bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_OscConfig+0x538>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d030      	beq.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d129      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d122      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bec:	4013      	ands	r3, r2
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d119      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d10f      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023800 	.word	0x40023800

08003c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e03f      	b.n	8003cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fe fd14 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2224      	movs	r2, #36	; 0x24
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fcdf 	bl	8004648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d11d      	bne.n	8003d30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_UART_Receive_IT+0x26>
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e016      	b.n	8003d32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Receive_IT+0x38>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e00f      	b.n	8003d32 <HAL_UART_Receive_IT+0x58>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	461a      	mov	r2, r3
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fab6 	bl	8004298 <UART_Start_Receive_IT>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	e000      	b.n	8003d32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b0ba      	sub	sp, #232	; 0xe8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x66>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fb99 	bl	80044d2 <UART_Receive_IT>
      return;
 8003da0:	e256      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80de 	beq.w	8003f68 <HAL_UART_IRQHandler+0x22c>
 8003dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dbc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80d1 	beq.w	8003f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_UART_IRQHandler+0xae>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_UART_IRQHandler+0xd2>
 8003df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xf6>
 8003e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_UART_IRQHandler+0x126>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0208 	orr.w	r2, r3, #8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 81ed 	beq.w	8004246 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_UART_IRQHandler+0x14e>
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fb24 	bl	80044d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x17a>
 8003eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d04f      	beq.n	8003f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa2c 	bl	8004314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d141      	bne.n	8003f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1d9      	bne.n	8003eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d013      	beq.n	8003f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	4a7d      	ldr	r2, [pc, #500]	; (8004118 <HAL_UART_IRQHandler+0x3dc>)
 8003f24:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe fecf 	bl	8002cce <HAL_DMA_Abort_IT>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f40:	4610      	mov	r0, r2
 8003f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e00e      	b.n	8003f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f990 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	e00a      	b.n	8003f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f98c 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e006      	b.n	8003f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f988 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f62:	e170      	b.n	8004246 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	bf00      	nop
    return;
 8003f66:	e16e      	b.n	8004246 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f040 814a 	bne.w	8004206 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8143 	beq.w	8004206 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 813c 	beq.w	8004206 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	f040 80b4 	bne.w	800411c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8140 	beq.w	800424a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f080 8139 	bcs.w	800424a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fde:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	f000 8088 	beq.w	80040fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800400c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800401a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800401e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1d9      	bne.n	8003fee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800404a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800405e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004062:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004066:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e1      	bne.n	800403a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800409a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800409c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e3      	bne.n	8004076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ce:	f023 0310 	bic.w	r3, r3, #16
 80040d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80040e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fd78 	bl	8002bee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004106:	b29b      	uxth	r3, r3
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	4619      	mov	r1, r3
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8b6 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004114:	e099      	b.n	800424a <HAL_UART_IRQHandler+0x50e>
 8004116:	bf00      	nop
 8004118:	080043db 	.word	0x080043db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004124:	b29b      	uxth	r3, r3
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 808b 	beq.w	800424e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800413c:	2b00      	cmp	r3, #0
 800413e:	f000 8086 	beq.w	800424e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004166:	647a      	str	r2, [r7, #68]	; 0x44
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800416c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1e3      	bne.n	8004142 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	e853 3f00 	ldrex	r3, [r3]
 8004188:	623b      	str	r3, [r7, #32]
   return(result);
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800419e:	633a      	str	r2, [r7, #48]	; 0x30
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e3      	bne.n	800417a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e8:	69b9      	ldr	r1, [r7, #24]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	e841 2300 	strex	r3, r2, [r1]
 80041f0:	617b      	str	r3, [r7, #20]
   return(result);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e3      	bne.n	80041c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f83e 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004204:	e023      	b.n	800424e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_UART_IRQHandler+0x4ea>
 8004212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8ef 	bl	8004402 <UART_Transmit_IT>
    return;
 8004224:	e014      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00e      	beq.n	8004250 <HAL_UART_IRQHandler+0x514>
 8004232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f92f 	bl	80044a2 <UART_EndTransmit_IT>
    return;
 8004244:	e004      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
    return;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
      return;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
      return;
 800424e:	bf00      	nop
  }
}
 8004250:	37e8      	adds	r7, #232	; 0xe8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop

08004258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2222      	movs	r2, #34	; 0x22
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0220 	orr.w	r2, r2, #32
 8004304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004314:	b480      	push	{r7}
 8004316:	b095      	sub	sp, #84	; 0x54
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800433c:	643a      	str	r2, [r7, #64]	; 0x40
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e5      	bne.n	800431c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3314      	adds	r3, #20
 8004356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3314      	adds	r3, #20
 800436e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	2b01      	cmp	r3, #1
 800438a:	d119      	bne.n	80043c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	330c      	adds	r3, #12
 8004392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	60bb      	str	r3, [r7, #8]
   return(result);
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ac:	61ba      	str	r2, [r7, #24]
 80043ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043ce:	bf00      	nop
 80043d0:	3754      	adds	r7, #84	; 0x54
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff39 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b21      	cmp	r3, #33	; 0x21
 8004414:	d13e      	bne.n	8004494 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d114      	bne.n	800444a <UART_Transmit_IT+0x48>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d110      	bne.n	800444a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	1c9a      	adds	r2, r3, #2
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	621a      	str	r2, [r3, #32]
 8004448:	e008      	b.n	800445c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6211      	str	r1, [r2, #32]
 8004454:	781a      	ldrb	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	4619      	mov	r1, r3
 800446a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800447e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff fec8 	bl	8004258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b08c      	sub	sp, #48	; 0x30
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	f040 80ab 	bne.w	800463e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d117      	bne.n	8004522 <UART_Receive_IT+0x50>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d113      	bne.n	8004522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	b29a      	uxth	r2, r3
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
 8004520:	e026      	b.n	8004570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d007      	beq.n	8004546 <UART_Receive_IT+0x74>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <UART_Receive_IT+0x82>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e008      	b.n	8004566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004560:	b2da      	uxtb	r2, r3
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004580:	2b00      	cmp	r3, #0
 8004582:	d15a      	bne.n	800463a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0220 	bic.w	r2, r2, #32
 8004592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d135      	bne.n	8004630 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	e853 3f00 	ldrex	r3, [r3]
 80045d8:	613b      	str	r3, [r7, #16]
   return(result);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f023 0310 	bic.w	r3, r3, #16
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	330c      	adds	r3, #12
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	623a      	str	r2, [r7, #32]
 80045ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	69f9      	ldr	r1, [r7, #28]
 80045f0:	6a3a      	ldr	r2, [r7, #32]
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e5      	bne.n	80045ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b10      	cmp	r3, #16
 800460a:	d10a      	bne.n	8004622 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004626:	4619      	mov	r1, r3
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff fe29 	bl	8004280 <HAL_UARTEx_RxEventCallback>
 800462e:	e002      	b.n	8004636 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc fcb7 	bl	8000fa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	e002      	b.n	8004640 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e000      	b.n	8004640 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
  }
}
 8004640:	4618      	mov	r0, r3
 8004642:	3730      	adds	r7, #48	; 0x30
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800464c:	b0c0      	sub	sp, #256	; 0x100
 800464e:	af00      	add	r7, sp, #0
 8004650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	68d9      	ldr	r1, [r3, #12]
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	ea40 0301 	orr.w	r3, r0, r1
 8004670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	431a      	orrs	r2, r3
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046a0:	f021 010c 	bic.w	r1, r1, #12
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046ae:	430b      	orrs	r3, r1
 80046b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	6999      	ldr	r1, [r3, #24]
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	ea40 0301 	orr.w	r3, r0, r1
 80046ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b8f      	ldr	r3, [pc, #572]	; (8004914 <UART_SetConfig+0x2cc>)
 80046d8:	429a      	cmp	r2, r3
 80046da:	d005      	beq.n	80046e8 <UART_SetConfig+0xa0>
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b8d      	ldr	r3, [pc, #564]	; (8004918 <UART_SetConfig+0x2d0>)
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d104      	bne.n	80046f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7fe fdc8 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 80046ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046f0:	e003      	b.n	80046fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046f2:	f7fe fdaf 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80046f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004704:	f040 810c 	bne.w	8004920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470c:	2200      	movs	r2, #0
 800470e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800471a:	4622      	mov	r2, r4
 800471c:	462b      	mov	r3, r5
 800471e:	1891      	adds	r1, r2, r2
 8004720:	65b9      	str	r1, [r7, #88]	; 0x58
 8004722:	415b      	adcs	r3, r3
 8004724:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800472a:	4621      	mov	r1, r4
 800472c:	eb12 0801 	adds.w	r8, r2, r1
 8004730:	4629      	mov	r1, r5
 8004732:	eb43 0901 	adc.w	r9, r3, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	4623      	mov	r3, r4
 8004750:	eb18 0303 	adds.w	r3, r8, r3
 8004754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004758:	462b      	mov	r3, r5
 800475a:	eb49 0303 	adc.w	r3, r9, r3
 800475e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800476e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004776:	460b      	mov	r3, r1
 8004778:	18db      	adds	r3, r3, r3
 800477a:	653b      	str	r3, [r7, #80]	; 0x50
 800477c:	4613      	mov	r3, r2
 800477e:	eb42 0303 	adc.w	r3, r2, r3
 8004782:	657b      	str	r3, [r7, #84]	; 0x54
 8004784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800478c:	f7fc fa6c 	bl	8000c68 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4b61      	ldr	r3, [pc, #388]	; (800491c <UART_SetConfig+0x2d4>)
 8004796:	fba3 2302 	umull	r2, r3, r3, r2
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	011c      	lsls	r4, r3, #4
 800479e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80047b8:	415b      	adcs	r3, r3
 80047ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047c0:	4641      	mov	r1, r8
 80047c2:	eb12 0a01 	adds.w	sl, r2, r1
 80047c6:	4649      	mov	r1, r9
 80047c8:	eb43 0b01 	adc.w	fp, r3, r1
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e0:	4692      	mov	sl, r2
 80047e2:	469b      	mov	fp, r3
 80047e4:	4643      	mov	r3, r8
 80047e6:	eb1a 0303 	adds.w	r3, sl, r3
 80047ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ee:	464b      	mov	r3, r9
 80047f0:	eb4b 0303 	adc.w	r3, fp, r3
 80047f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800480c:	460b      	mov	r3, r1
 800480e:	18db      	adds	r3, r3, r3
 8004810:	643b      	str	r3, [r7, #64]	; 0x40
 8004812:	4613      	mov	r3, r2
 8004814:	eb42 0303 	adc.w	r3, r2, r3
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
 800481a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800481e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004822:	f7fc fa21 	bl	8000c68 <__aeabi_uldivmod>
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4611      	mov	r1, r2
 800482c:	4b3b      	ldr	r3, [pc, #236]	; (800491c <UART_SetConfig+0x2d4>)
 800482e:	fba3 2301 	umull	r2, r3, r3, r1
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2264      	movs	r2, #100	; 0x64
 8004836:	fb02 f303 	mul.w	r3, r2, r3
 800483a:	1acb      	subs	r3, r1, r3
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <UART_SetConfig+0x2d4>)
 8004844:	fba3 2302 	umull	r2, r3, r3, r2
 8004848:	095b      	lsrs	r3, r3, #5
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004850:	441c      	add	r4, r3
 8004852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800485c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004864:	4642      	mov	r2, r8
 8004866:	464b      	mov	r3, r9
 8004868:	1891      	adds	r1, r2, r2
 800486a:	63b9      	str	r1, [r7, #56]	; 0x38
 800486c:	415b      	adcs	r3, r3
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004874:	4641      	mov	r1, r8
 8004876:	1851      	adds	r1, r2, r1
 8004878:	6339      	str	r1, [r7, #48]	; 0x30
 800487a:	4649      	mov	r1, r9
 800487c:	414b      	adcs	r3, r1
 800487e:	637b      	str	r3, [r7, #52]	; 0x34
 8004880:	f04f 0200 	mov.w	r2, #0
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800488c:	4659      	mov	r1, fp
 800488e:	00cb      	lsls	r3, r1, #3
 8004890:	4651      	mov	r1, sl
 8004892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004896:	4651      	mov	r1, sl
 8004898:	00ca      	lsls	r2, r1, #3
 800489a:	4610      	mov	r0, r2
 800489c:	4619      	mov	r1, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	4642      	mov	r2, r8
 80048a2:	189b      	adds	r3, r3, r2
 80048a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048a8:	464b      	mov	r3, r9
 80048aa:	460a      	mov	r2, r1
 80048ac:	eb42 0303 	adc.w	r3, r2, r3
 80048b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048c8:	460b      	mov	r3, r1
 80048ca:	18db      	adds	r3, r3, r3
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ce:	4613      	mov	r3, r2
 80048d0:	eb42 0303 	adc.w	r3, r2, r3
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048de:	f7fc f9c3 	bl	8000c68 <__aeabi_uldivmod>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <UART_SetConfig+0x2d4>)
 80048e8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ec:	095b      	lsrs	r3, r3, #5
 80048ee:	2164      	movs	r1, #100	; 0x64
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	3332      	adds	r3, #50	; 0x32
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <UART_SetConfig+0x2d4>)
 80048fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f003 0207 	and.w	r2, r3, #7
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4422      	add	r2, r4
 800490e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004910:	e105      	b.n	8004b1e <UART_SetConfig+0x4d6>
 8004912:	bf00      	nop
 8004914:	40011000 	.word	0x40011000
 8004918:	40011400 	.word	0x40011400
 800491c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004924:	2200      	movs	r2, #0
 8004926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800492a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800492e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004932:	4642      	mov	r2, r8
 8004934:	464b      	mov	r3, r9
 8004936:	1891      	adds	r1, r2, r2
 8004938:	6239      	str	r1, [r7, #32]
 800493a:	415b      	adcs	r3, r3
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004942:	4641      	mov	r1, r8
 8004944:	1854      	adds	r4, r2, r1
 8004946:	4649      	mov	r1, r9
 8004948:	eb43 0501 	adc.w	r5, r3, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004968:	464b      	mov	r3, r9
 800496a:	eb45 0303 	adc.w	r3, r5, r3
 800496e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800497e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800498e:	4629      	mov	r1, r5
 8004990:	008b      	lsls	r3, r1, #2
 8004992:	4621      	mov	r1, r4
 8004994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004998:	4621      	mov	r1, r4
 800499a:	008a      	lsls	r2, r1, #2
 800499c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049a0:	f7fc f962 	bl	8000c68 <__aeabi_uldivmod>
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4b60      	ldr	r3, [pc, #384]	; (8004b2c <UART_SetConfig+0x4e4>)
 80049aa:	fba3 2302 	umull	r2, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	011c      	lsls	r4, r3, #4
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	61b9      	str	r1, [r7, #24]
 80049cc:	415b      	adcs	r3, r3
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d4:	4641      	mov	r1, r8
 80049d6:	1851      	adds	r1, r2, r1
 80049d8:	6139      	str	r1, [r7, #16]
 80049da:	4649      	mov	r1, r9
 80049dc:	414b      	adcs	r3, r1
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049ec:	4659      	mov	r1, fp
 80049ee:	00cb      	lsls	r3, r1, #3
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f6:	4651      	mov	r1, sl
 80049f8:	00ca      	lsls	r2, r1, #3
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	4642      	mov	r2, r8
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a08:	464b      	mov	r3, r9
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	eb42 0303 	adc.w	r3, r2, r3
 8004a10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	008b      	lsls	r3, r1, #2
 8004a30:	4641      	mov	r1, r8
 8004a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a36:	4641      	mov	r1, r8
 8004a38:	008a      	lsls	r2, r1, #2
 8004a3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a3e:	f7fc f913 	bl	8000c68 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a34      	ldr	r2, [pc, #208]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a66:	441c      	add	r4, r3
 8004a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a70:	677a      	str	r2, [r7, #116]	; 0x74
 8004a72:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a76:	4642      	mov	r2, r8
 8004a78:	464b      	mov	r3, r9
 8004a7a:	1891      	adds	r1, r2, r2
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a86:	4641      	mov	r1, r8
 8004a88:	1851      	adds	r1, r2, r1
 8004a8a:	6039      	str	r1, [r7, #0]
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	414b      	adcs	r3, r1
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a9e:	4659      	mov	r1, fp
 8004aa0:	00cb      	lsls	r3, r1, #3
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa8:	4651      	mov	r1, sl
 8004aaa:	00ca      	lsls	r2, r1, #3
 8004aac:	4610      	mov	r0, r2
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	4642      	mov	r2, r8
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	663b      	str	r3, [r7, #96]	; 0x60
 8004acc:	667a      	str	r2, [r7, #100]	; 0x64
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ada:	4649      	mov	r1, r9
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	4641      	mov	r1, r8
 8004ae0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	008a      	lsls	r2, r1, #2
 8004ae8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aec:	f7fc f8bc 	bl	8000c68 <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004af6:	fba3 1302 	umull	r1, r3, r3, r2
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	2164      	movs	r1, #100	; 0x64
 8004afe:	fb01 f303 	mul.w	r3, r1, r3
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	3332      	adds	r3, #50	; 0x32
 8004b08:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <UART_SetConfig+0x4e4>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f003 020f 	and.w	r2, r3, #15
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4422      	add	r2, r4
 8004b1c:	609a      	str	r2, [r3, #8]
}
 8004b1e:	bf00      	nop
 8004b20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b24:	46bd      	mov	sp, r7
 8004b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b2a:	bf00      	nop
 8004b2c:	51eb851f 	.word	0x51eb851f

08004b30 <__errno>:
 8004b30:	4b01      	ldr	r3, [pc, #4]	; (8004b38 <__errno+0x8>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	2000000c 	.word	0x2000000c

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	4d0d      	ldr	r5, [pc, #52]	; (8004b74 <__libc_init_array+0x38>)
 8004b40:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b42:	1b64      	subs	r4, r4, r5
 8004b44:	10a4      	asrs	r4, r4, #2
 8004b46:	2600      	movs	r6, #0
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	4d0b      	ldr	r5, [pc, #44]	; (8004b7c <__libc_init_array+0x40>)
 8004b4e:	4c0c      	ldr	r4, [pc, #48]	; (8004b80 <__libc_init_array+0x44>)
 8004b50:	f001 fbbc 	bl	80062cc <_init>
 8004b54:	1b64      	subs	r4, r4, r5
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	2600      	movs	r6, #0
 8004b5a:	42a6      	cmp	r6, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b64:	4798      	blx	r3
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6e:	4798      	blx	r3
 8004b70:	3601      	adds	r6, #1
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	08006388 	.word	0x08006388
 8004b78:	08006388 	.word	0x08006388
 8004b7c:	08006388 	.word	0x08006388
 8004b80:	0800638c 	.word	0x0800638c

08004b84 <memset>:
 8004b84:	4402      	add	r2, r0
 8004b86:	4603      	mov	r3, r0
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d100      	bne.n	8004b8e <memset+0xa>
 8004b8c:	4770      	bx	lr
 8004b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b92:	e7f9      	b.n	8004b88 <memset+0x4>

08004b94 <siprintf>:
 8004b94:	b40e      	push	{r1, r2, r3}
 8004b96:	b500      	push	{lr}
 8004b98:	b09c      	sub	sp, #112	; 0x70
 8004b9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	9006      	str	r0, [sp, #24]
 8004ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ba4:	4809      	ldr	r0, [pc, #36]	; (8004bcc <siprintf+0x38>)
 8004ba6:	9107      	str	r1, [sp, #28]
 8004ba8:	9104      	str	r1, [sp, #16]
 8004baa:	4909      	ldr	r1, [pc, #36]	; (8004bd0 <siprintf+0x3c>)
 8004bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb0:	9105      	str	r1, [sp, #20]
 8004bb2:	6800      	ldr	r0, [r0, #0]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	a902      	add	r1, sp, #8
 8004bb8:	f000 f87c 	bl	8004cb4 <_svfiprintf_r>
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	b01c      	add	sp, #112	; 0x70
 8004bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc8:	b003      	add	sp, #12
 8004bca:	4770      	bx	lr
 8004bcc:	2000000c 	.word	0x2000000c
 8004bd0:	ffff0208 	.word	0xffff0208

08004bd4 <strncmp>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	b17a      	cbz	r2, 8004bf8 <strncmp+0x24>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	3901      	subs	r1, #1
 8004bdc:	1884      	adds	r4, r0, r2
 8004bde:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004be2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004be6:	4290      	cmp	r0, r2
 8004be8:	d101      	bne.n	8004bee <strncmp+0x1a>
 8004bea:	42a3      	cmp	r3, r4
 8004bec:	d101      	bne.n	8004bf2 <strncmp+0x1e>
 8004bee:	1a80      	subs	r0, r0, r2
 8004bf0:	bd10      	pop	{r4, pc}
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d1f3      	bne.n	8004bde <strncmp+0xa>
 8004bf6:	e7fa      	b.n	8004bee <strncmp+0x1a>
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	e7f9      	b.n	8004bf0 <strncmp+0x1c>

08004bfc <__ssputs_r>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	688e      	ldr	r6, [r1, #8]
 8004c02:	429e      	cmp	r6, r3
 8004c04:	4682      	mov	sl, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	4690      	mov	r8, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	d838      	bhi.n	8004c80 <__ssputs_r+0x84>
 8004c0e:	898a      	ldrh	r2, [r1, #12]
 8004c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c14:	d032      	beq.n	8004c7c <__ssputs_r+0x80>
 8004c16:	6825      	ldr	r5, [r4, #0]
 8004c18:	6909      	ldr	r1, [r1, #16]
 8004c1a:	eba5 0901 	sub.w	r9, r5, r1
 8004c1e:	6965      	ldr	r5, [r4, #20]
 8004c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c28:	3301      	adds	r3, #1
 8004c2a:	444b      	add	r3, r9
 8004c2c:	106d      	asrs	r5, r5, #1
 8004c2e:	429d      	cmp	r5, r3
 8004c30:	bf38      	it	cc
 8004c32:	461d      	movcc	r5, r3
 8004c34:	0553      	lsls	r3, r2, #21
 8004c36:	d531      	bpl.n	8004c9c <__ssputs_r+0xa0>
 8004c38:	4629      	mov	r1, r5
 8004c3a:	f000 fb63 	bl	8005304 <_malloc_r>
 8004c3e:	4606      	mov	r6, r0
 8004c40:	b950      	cbnz	r0, 8004c58 <__ssputs_r+0x5c>
 8004c42:	230c      	movs	r3, #12
 8004c44:	f8ca 3000 	str.w	r3, [sl]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4e:	81a3      	strh	r3, [r4, #12]
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	6921      	ldr	r1, [r4, #16]
 8004c5a:	464a      	mov	r2, r9
 8004c5c:	f000 fabe 	bl	80051dc <memcpy>
 8004c60:	89a3      	ldrh	r3, [r4, #12]
 8004c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6a:	81a3      	strh	r3, [r4, #12]
 8004c6c:	6126      	str	r6, [r4, #16]
 8004c6e:	6165      	str	r5, [r4, #20]
 8004c70:	444e      	add	r6, r9
 8004c72:	eba5 0509 	sub.w	r5, r5, r9
 8004c76:	6026      	str	r6, [r4, #0]
 8004c78:	60a5      	str	r5, [r4, #8]
 8004c7a:	463e      	mov	r6, r7
 8004c7c:	42be      	cmp	r6, r7
 8004c7e:	d900      	bls.n	8004c82 <__ssputs_r+0x86>
 8004c80:	463e      	mov	r6, r7
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	4632      	mov	r2, r6
 8004c86:	4641      	mov	r1, r8
 8004c88:	f000 fab6 	bl	80051f8 <memmove>
 8004c8c:	68a3      	ldr	r3, [r4, #8]
 8004c8e:	1b9b      	subs	r3, r3, r6
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	4433      	add	r3, r6
 8004c96:	6023      	str	r3, [r4, #0]
 8004c98:	2000      	movs	r0, #0
 8004c9a:	e7db      	b.n	8004c54 <__ssputs_r+0x58>
 8004c9c:	462a      	mov	r2, r5
 8004c9e:	f000 fba5 	bl	80053ec <_realloc_r>
 8004ca2:	4606      	mov	r6, r0
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d1e1      	bne.n	8004c6c <__ssputs_r+0x70>
 8004ca8:	6921      	ldr	r1, [r4, #16]
 8004caa:	4650      	mov	r0, sl
 8004cac:	f000 fabe 	bl	800522c <_free_r>
 8004cb0:	e7c7      	b.n	8004c42 <__ssputs_r+0x46>
	...

08004cb4 <_svfiprintf_r>:
 8004cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb8:	4698      	mov	r8, r3
 8004cba:	898b      	ldrh	r3, [r1, #12]
 8004cbc:	061b      	lsls	r3, r3, #24
 8004cbe:	b09d      	sub	sp, #116	; 0x74
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	460d      	mov	r5, r1
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	d50e      	bpl.n	8004ce6 <_svfiprintf_r+0x32>
 8004cc8:	690b      	ldr	r3, [r1, #16]
 8004cca:	b963      	cbnz	r3, 8004ce6 <_svfiprintf_r+0x32>
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	f000 fb19 	bl	8005304 <_malloc_r>
 8004cd2:	6028      	str	r0, [r5, #0]
 8004cd4:	6128      	str	r0, [r5, #16]
 8004cd6:	b920      	cbnz	r0, 8004ce2 <_svfiprintf_r+0x2e>
 8004cd8:	230c      	movs	r3, #12
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e0d1      	b.n	8004e86 <_svfiprintf_r+0x1d2>
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	616b      	str	r3, [r5, #20]
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cea:	2320      	movs	r3, #32
 8004cec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf4:	2330      	movs	r3, #48	; 0x30
 8004cf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ea0 <_svfiprintf_r+0x1ec>
 8004cfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfe:	f04f 0901 	mov.w	r9, #1
 8004d02:	4623      	mov	r3, r4
 8004d04:	469a      	mov	sl, r3
 8004d06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d0a:	b10a      	cbz	r2, 8004d10 <_svfiprintf_r+0x5c>
 8004d0c:	2a25      	cmp	r2, #37	; 0x25
 8004d0e:	d1f9      	bne.n	8004d04 <_svfiprintf_r+0x50>
 8004d10:	ebba 0b04 	subs.w	fp, sl, r4
 8004d14:	d00b      	beq.n	8004d2e <_svfiprintf_r+0x7a>
 8004d16:	465b      	mov	r3, fp
 8004d18:	4622      	mov	r2, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f7ff ff6d 	bl	8004bfc <__ssputs_r>
 8004d22:	3001      	adds	r0, #1
 8004d24:	f000 80aa 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d2a:	445a      	add	r2, fp
 8004d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a2 	beq.w	8004e7c <_svfiprintf_r+0x1c8>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d42:	f10a 0a01 	add.w	sl, sl, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	9307      	str	r3, [sp, #28]
 8004d4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d50:	4654      	mov	r4, sl
 8004d52:	2205      	movs	r2, #5
 8004d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d58:	4851      	ldr	r0, [pc, #324]	; (8004ea0 <_svfiprintf_r+0x1ec>)
 8004d5a:	f7fb fa59 	bl	8000210 <memchr>
 8004d5e:	9a04      	ldr	r2, [sp, #16]
 8004d60:	b9d8      	cbnz	r0, 8004d9a <_svfiprintf_r+0xe6>
 8004d62:	06d0      	lsls	r0, r2, #27
 8004d64:	bf44      	itt	mi
 8004d66:	2320      	movmi	r3, #32
 8004d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d6c:	0711      	lsls	r1, r2, #28
 8004d6e:	bf44      	itt	mi
 8004d70:	232b      	movmi	r3, #43	; 0x2b
 8004d72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d76:	f89a 3000 	ldrb.w	r3, [sl]
 8004d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d7c:	d015      	beq.n	8004daa <_svfiprintf_r+0xf6>
 8004d7e:	9a07      	ldr	r2, [sp, #28]
 8004d80:	4654      	mov	r4, sl
 8004d82:	2000      	movs	r0, #0
 8004d84:	f04f 0c0a 	mov.w	ip, #10
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d8e:	3b30      	subs	r3, #48	; 0x30
 8004d90:	2b09      	cmp	r3, #9
 8004d92:	d94e      	bls.n	8004e32 <_svfiprintf_r+0x17e>
 8004d94:	b1b0      	cbz	r0, 8004dc4 <_svfiprintf_r+0x110>
 8004d96:	9207      	str	r2, [sp, #28]
 8004d98:	e014      	b.n	8004dc4 <_svfiprintf_r+0x110>
 8004d9a:	eba0 0308 	sub.w	r3, r0, r8
 8004d9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004da2:	4313      	orrs	r3, r2
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	46a2      	mov	sl, r4
 8004da8:	e7d2      	b.n	8004d50 <_svfiprintf_r+0x9c>
 8004daa:	9b03      	ldr	r3, [sp, #12]
 8004dac:	1d19      	adds	r1, r3, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	9103      	str	r1, [sp, #12]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	bfbb      	ittet	lt
 8004db6:	425b      	neglt	r3, r3
 8004db8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dbc:	9307      	strge	r3, [sp, #28]
 8004dbe:	9307      	strlt	r3, [sp, #28]
 8004dc0:	bfb8      	it	lt
 8004dc2:	9204      	strlt	r2, [sp, #16]
 8004dc4:	7823      	ldrb	r3, [r4, #0]
 8004dc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc8:	d10c      	bne.n	8004de4 <_svfiprintf_r+0x130>
 8004dca:	7863      	ldrb	r3, [r4, #1]
 8004dcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004dce:	d135      	bne.n	8004e3c <_svfiprintf_r+0x188>
 8004dd0:	9b03      	ldr	r3, [sp, #12]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	9203      	str	r2, [sp, #12]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bfb8      	it	lt
 8004ddc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004de0:	3402      	adds	r4, #2
 8004de2:	9305      	str	r3, [sp, #20]
 8004de4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eb0 <_svfiprintf_r+0x1fc>
 8004de8:	7821      	ldrb	r1, [r4, #0]
 8004dea:	2203      	movs	r2, #3
 8004dec:	4650      	mov	r0, sl
 8004dee:	f7fb fa0f 	bl	8000210 <memchr>
 8004df2:	b140      	cbz	r0, 8004e06 <_svfiprintf_r+0x152>
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	eba0 000a 	sub.w	r0, r0, sl
 8004dfa:	fa03 f000 	lsl.w	r0, r3, r0
 8004dfe:	9b04      	ldr	r3, [sp, #16]
 8004e00:	4303      	orrs	r3, r0
 8004e02:	3401      	adds	r4, #1
 8004e04:	9304      	str	r3, [sp, #16]
 8004e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e0a:	4826      	ldr	r0, [pc, #152]	; (8004ea4 <_svfiprintf_r+0x1f0>)
 8004e0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e10:	2206      	movs	r2, #6
 8004e12:	f7fb f9fd 	bl	8000210 <memchr>
 8004e16:	2800      	cmp	r0, #0
 8004e18:	d038      	beq.n	8004e8c <_svfiprintf_r+0x1d8>
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <_svfiprintf_r+0x1f4>)
 8004e1c:	bb1b      	cbnz	r3, 8004e66 <_svfiprintf_r+0x1b2>
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	3307      	adds	r3, #7
 8004e22:	f023 0307 	bic.w	r3, r3, #7
 8004e26:	3308      	adds	r3, #8
 8004e28:	9303      	str	r3, [sp, #12]
 8004e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e2c:	4433      	add	r3, r6
 8004e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e30:	e767      	b.n	8004d02 <_svfiprintf_r+0x4e>
 8004e32:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e36:	460c      	mov	r4, r1
 8004e38:	2001      	movs	r0, #1
 8004e3a:	e7a5      	b.n	8004d88 <_svfiprintf_r+0xd4>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	3401      	adds	r4, #1
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	4619      	mov	r1, r3
 8004e44:	f04f 0c0a 	mov.w	ip, #10
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4e:	3a30      	subs	r2, #48	; 0x30
 8004e50:	2a09      	cmp	r2, #9
 8004e52:	d903      	bls.n	8004e5c <_svfiprintf_r+0x1a8>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0c5      	beq.n	8004de4 <_svfiprintf_r+0x130>
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	e7c3      	b.n	8004de4 <_svfiprintf_r+0x130>
 8004e5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e60:	4604      	mov	r4, r0
 8004e62:	2301      	movs	r3, #1
 8004e64:	e7f0      	b.n	8004e48 <_svfiprintf_r+0x194>
 8004e66:	ab03      	add	r3, sp, #12
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	462a      	mov	r2, r5
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e6e:	a904      	add	r1, sp, #16
 8004e70:	4638      	mov	r0, r7
 8004e72:	f3af 8000 	nop.w
 8004e76:	1c42      	adds	r2, r0, #1
 8004e78:	4606      	mov	r6, r0
 8004e7a:	d1d6      	bne.n	8004e2a <_svfiprintf_r+0x176>
 8004e7c:	89ab      	ldrh	r3, [r5, #12]
 8004e7e:	065b      	lsls	r3, r3, #25
 8004e80:	f53f af2c 	bmi.w	8004cdc <_svfiprintf_r+0x28>
 8004e84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e86:	b01d      	add	sp, #116	; 0x74
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	ab03      	add	r3, sp, #12
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	462a      	mov	r2, r5
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <_svfiprintf_r+0x1f8>)
 8004e94:	a904      	add	r1, sp, #16
 8004e96:	4638      	mov	r0, r7
 8004e98:	f000 f87a 	bl	8004f90 <_printf_i>
 8004e9c:	e7eb      	b.n	8004e76 <_svfiprintf_r+0x1c2>
 8004e9e:	bf00      	nop
 8004ea0:	0800631c 	.word	0x0800631c
 8004ea4:	08006326 	.word	0x08006326
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08004bfd 	.word	0x08004bfd
 8004eb0:	08006322 	.word	0x08006322

08004eb4 <_printf_common>:
 8004eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	4616      	mov	r6, r2
 8004eba:	4699      	mov	r9, r3
 8004ebc:	688a      	ldr	r2, [r1, #8]
 8004ebe:	690b      	ldr	r3, [r1, #16]
 8004ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	bfb8      	it	lt
 8004ec8:	4613      	movlt	r3, r2
 8004eca:	6033      	str	r3, [r6, #0]
 8004ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	b10a      	cbz	r2, 8004eda <_printf_common+0x26>
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	6033      	str	r3, [r6, #0]
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	0699      	lsls	r1, r3, #26
 8004ede:	bf42      	ittt	mi
 8004ee0:	6833      	ldrmi	r3, [r6, #0]
 8004ee2:	3302      	addmi	r3, #2
 8004ee4:	6033      	strmi	r3, [r6, #0]
 8004ee6:	6825      	ldr	r5, [r4, #0]
 8004ee8:	f015 0506 	ands.w	r5, r5, #6
 8004eec:	d106      	bne.n	8004efc <_printf_common+0x48>
 8004eee:	f104 0a19 	add.w	sl, r4, #25
 8004ef2:	68e3      	ldr	r3, [r4, #12]
 8004ef4:	6832      	ldr	r2, [r6, #0]
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	42ab      	cmp	r3, r5
 8004efa:	dc26      	bgt.n	8004f4a <_printf_common+0x96>
 8004efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f00:	1e13      	subs	r3, r2, #0
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	bf18      	it	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	0692      	lsls	r2, r2, #26
 8004f0a:	d42b      	bmi.n	8004f64 <_printf_common+0xb0>
 8004f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f10:	4649      	mov	r1, r9
 8004f12:	4638      	mov	r0, r7
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d01e      	beq.n	8004f58 <_printf_common+0xa4>
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	68e5      	ldr	r5, [r4, #12]
 8004f1e:	6832      	ldr	r2, [r6, #0]
 8004f20:	f003 0306 	and.w	r3, r3, #6
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	bf08      	it	eq
 8004f28:	1aad      	subeq	r5, r5, r2
 8004f2a:	68a3      	ldr	r3, [r4, #8]
 8004f2c:	6922      	ldr	r2, [r4, #16]
 8004f2e:	bf0c      	ite	eq
 8004f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f34:	2500      	movne	r5, #0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	bfc4      	itt	gt
 8004f3a:	1a9b      	subgt	r3, r3, r2
 8004f3c:	18ed      	addgt	r5, r5, r3
 8004f3e:	2600      	movs	r6, #0
 8004f40:	341a      	adds	r4, #26
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	d11a      	bne.n	8004f7c <_printf_common+0xc8>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e008      	b.n	8004f5c <_printf_common+0xa8>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4652      	mov	r2, sl
 8004f4e:	4649      	mov	r1, r9
 8004f50:	4638      	mov	r0, r7
 8004f52:	47c0      	blx	r8
 8004f54:	3001      	adds	r0, #1
 8004f56:	d103      	bne.n	8004f60 <_printf_common+0xac>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f60:	3501      	adds	r5, #1
 8004f62:	e7c6      	b.n	8004ef2 <_printf_common+0x3e>
 8004f64:	18e1      	adds	r1, r4, r3
 8004f66:	1c5a      	adds	r2, r3, #1
 8004f68:	2030      	movs	r0, #48	; 0x30
 8004f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f6e:	4422      	add	r2, r4
 8004f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f78:	3302      	adds	r3, #2
 8004f7a:	e7c7      	b.n	8004f0c <_printf_common+0x58>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4622      	mov	r2, r4
 8004f80:	4649      	mov	r1, r9
 8004f82:	4638      	mov	r0, r7
 8004f84:	47c0      	blx	r8
 8004f86:	3001      	adds	r0, #1
 8004f88:	d0e6      	beq.n	8004f58 <_printf_common+0xa4>
 8004f8a:	3601      	adds	r6, #1
 8004f8c:	e7d9      	b.n	8004f42 <_printf_common+0x8e>
	...

08004f90 <_printf_i>:
 8004f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	7e0f      	ldrb	r7, [r1, #24]
 8004f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f98:	2f78      	cmp	r7, #120	; 0x78
 8004f9a:	4691      	mov	r9, r2
 8004f9c:	4680      	mov	r8, r0
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	469a      	mov	sl, r3
 8004fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fa6:	d807      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fa8:	2f62      	cmp	r7, #98	; 0x62
 8004faa:	d80a      	bhi.n	8004fc2 <_printf_i+0x32>
 8004fac:	2f00      	cmp	r7, #0
 8004fae:	f000 80d8 	beq.w	8005162 <_printf_i+0x1d2>
 8004fb2:	2f58      	cmp	r7, #88	; 0x58
 8004fb4:	f000 80a3 	beq.w	80050fe <_printf_i+0x16e>
 8004fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc0:	e03a      	b.n	8005038 <_printf_i+0xa8>
 8004fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc6:	2b15      	cmp	r3, #21
 8004fc8:	d8f6      	bhi.n	8004fb8 <_printf_i+0x28>
 8004fca:	a101      	add	r1, pc, #4	; (adr r1, 8004fd0 <_printf_i+0x40>)
 8004fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd0:	08005029 	.word	0x08005029
 8004fd4:	0800503d 	.word	0x0800503d
 8004fd8:	08004fb9 	.word	0x08004fb9
 8004fdc:	08004fb9 	.word	0x08004fb9
 8004fe0:	08004fb9 	.word	0x08004fb9
 8004fe4:	08004fb9 	.word	0x08004fb9
 8004fe8:	0800503d 	.word	0x0800503d
 8004fec:	08004fb9 	.word	0x08004fb9
 8004ff0:	08004fb9 	.word	0x08004fb9
 8004ff4:	08004fb9 	.word	0x08004fb9
 8004ff8:	08004fb9 	.word	0x08004fb9
 8004ffc:	08005149 	.word	0x08005149
 8005000:	0800506d 	.word	0x0800506d
 8005004:	0800512b 	.word	0x0800512b
 8005008:	08004fb9 	.word	0x08004fb9
 800500c:	08004fb9 	.word	0x08004fb9
 8005010:	0800516b 	.word	0x0800516b
 8005014:	08004fb9 	.word	0x08004fb9
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08004fb9 	.word	0x08004fb9
 8005020:	08004fb9 	.word	0x08004fb9
 8005024:	08005133 	.word	0x08005133
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	1d1a      	adds	r2, r3, #4
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	602a      	str	r2, [r5, #0]
 8005030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005038:	2301      	movs	r3, #1
 800503a:	e0a3      	b.n	8005184 <_printf_i+0x1f4>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	6829      	ldr	r1, [r5, #0]
 8005040:	0606      	lsls	r6, r0, #24
 8005042:	f101 0304 	add.w	r3, r1, #4
 8005046:	d50a      	bpl.n	800505e <_printf_i+0xce>
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	2e00      	cmp	r6, #0
 800504e:	da03      	bge.n	8005058 <_printf_i+0xc8>
 8005050:	232d      	movs	r3, #45	; 0x2d
 8005052:	4276      	negs	r6, r6
 8005054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005058:	485e      	ldr	r0, [pc, #376]	; (80051d4 <_printf_i+0x244>)
 800505a:	230a      	movs	r3, #10
 800505c:	e019      	b.n	8005092 <_printf_i+0x102>
 800505e:	680e      	ldr	r6, [r1, #0]
 8005060:	602b      	str	r3, [r5, #0]
 8005062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005066:	bf18      	it	ne
 8005068:	b236      	sxthne	r6, r6
 800506a:	e7ef      	b.n	800504c <_printf_i+0xbc>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	6820      	ldr	r0, [r4, #0]
 8005070:	1d19      	adds	r1, r3, #4
 8005072:	6029      	str	r1, [r5, #0]
 8005074:	0601      	lsls	r1, r0, #24
 8005076:	d501      	bpl.n	800507c <_printf_i+0xec>
 8005078:	681e      	ldr	r6, [r3, #0]
 800507a:	e002      	b.n	8005082 <_printf_i+0xf2>
 800507c:	0646      	lsls	r6, r0, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0xe8>
 8005080:	881e      	ldrh	r6, [r3, #0]
 8005082:	4854      	ldr	r0, [pc, #336]	; (80051d4 <_printf_i+0x244>)
 8005084:	2f6f      	cmp	r7, #111	; 0x6f
 8005086:	bf0c      	ite	eq
 8005088:	2308      	moveq	r3, #8
 800508a:	230a      	movne	r3, #10
 800508c:	2100      	movs	r1, #0
 800508e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005092:	6865      	ldr	r5, [r4, #4]
 8005094:	60a5      	str	r5, [r4, #8]
 8005096:	2d00      	cmp	r5, #0
 8005098:	bfa2      	ittt	ge
 800509a:	6821      	ldrge	r1, [r4, #0]
 800509c:	f021 0104 	bicge.w	r1, r1, #4
 80050a0:	6021      	strge	r1, [r4, #0]
 80050a2:	b90e      	cbnz	r6, 80050a8 <_printf_i+0x118>
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	d04d      	beq.n	8005144 <_printf_i+0x1b4>
 80050a8:	4615      	mov	r5, r2
 80050aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ae:	fb03 6711 	mls	r7, r3, r1, r6
 80050b2:	5dc7      	ldrb	r7, [r0, r7]
 80050b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b8:	4637      	mov	r7, r6
 80050ba:	42bb      	cmp	r3, r7
 80050bc:	460e      	mov	r6, r1
 80050be:	d9f4      	bls.n	80050aa <_printf_i+0x11a>
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10b      	bne.n	80050dc <_printf_i+0x14c>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	07de      	lsls	r6, r3, #31
 80050c8:	d508      	bpl.n	80050dc <_printf_i+0x14c>
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	6861      	ldr	r1, [r4, #4]
 80050ce:	4299      	cmp	r1, r3
 80050d0:	bfde      	ittt	le
 80050d2:	2330      	movle	r3, #48	; 0x30
 80050d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050dc:	1b52      	subs	r2, r2, r5
 80050de:	6122      	str	r2, [r4, #16]
 80050e0:	f8cd a000 	str.w	sl, [sp]
 80050e4:	464b      	mov	r3, r9
 80050e6:	aa03      	add	r2, sp, #12
 80050e8:	4621      	mov	r1, r4
 80050ea:	4640      	mov	r0, r8
 80050ec:	f7ff fee2 	bl	8004eb4 <_printf_common>
 80050f0:	3001      	adds	r0, #1
 80050f2:	d14c      	bne.n	800518e <_printf_i+0x1fe>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	b004      	add	sp, #16
 80050fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fe:	4835      	ldr	r0, [pc, #212]	; (80051d4 <_printf_i+0x244>)
 8005100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005104:	6829      	ldr	r1, [r5, #0]
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f851 6b04 	ldr.w	r6, [r1], #4
 800510c:	6029      	str	r1, [r5, #0]
 800510e:	061d      	lsls	r5, r3, #24
 8005110:	d514      	bpl.n	800513c <_printf_i+0x1ac>
 8005112:	07df      	lsls	r7, r3, #31
 8005114:	bf44      	itt	mi
 8005116:	f043 0320 	orrmi.w	r3, r3, #32
 800511a:	6023      	strmi	r3, [r4, #0]
 800511c:	b91e      	cbnz	r6, 8005126 <_printf_i+0x196>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f023 0320 	bic.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	2310      	movs	r3, #16
 8005128:	e7b0      	b.n	800508c <_printf_i+0xfc>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f043 0320 	orr.w	r3, r3, #32
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	2378      	movs	r3, #120	; 0x78
 8005134:	4828      	ldr	r0, [pc, #160]	; (80051d8 <_printf_i+0x248>)
 8005136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800513a:	e7e3      	b.n	8005104 <_printf_i+0x174>
 800513c:	0659      	lsls	r1, r3, #25
 800513e:	bf48      	it	mi
 8005140:	b2b6      	uxthmi	r6, r6
 8005142:	e7e6      	b.n	8005112 <_printf_i+0x182>
 8005144:	4615      	mov	r5, r2
 8005146:	e7bb      	b.n	80050c0 <_printf_i+0x130>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	6826      	ldr	r6, [r4, #0]
 800514c:	6961      	ldr	r1, [r4, #20]
 800514e:	1d18      	adds	r0, r3, #4
 8005150:	6028      	str	r0, [r5, #0]
 8005152:	0635      	lsls	r5, r6, #24
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	d501      	bpl.n	800515c <_printf_i+0x1cc>
 8005158:	6019      	str	r1, [r3, #0]
 800515a:	e002      	b.n	8005162 <_printf_i+0x1d2>
 800515c:	0670      	lsls	r0, r6, #25
 800515e:	d5fb      	bpl.n	8005158 <_printf_i+0x1c8>
 8005160:	8019      	strh	r1, [r3, #0]
 8005162:	2300      	movs	r3, #0
 8005164:	6123      	str	r3, [r4, #16]
 8005166:	4615      	mov	r5, r2
 8005168:	e7ba      	b.n	80050e0 <_printf_i+0x150>
 800516a:	682b      	ldr	r3, [r5, #0]
 800516c:	1d1a      	adds	r2, r3, #4
 800516e:	602a      	str	r2, [r5, #0]
 8005170:	681d      	ldr	r5, [r3, #0]
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	4628      	mov	r0, r5
 8005178:	f7fb f84a 	bl	8000210 <memchr>
 800517c:	b108      	cbz	r0, 8005182 <_printf_i+0x1f2>
 800517e:	1b40      	subs	r0, r0, r5
 8005180:	6060      	str	r0, [r4, #4]
 8005182:	6863      	ldr	r3, [r4, #4]
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	2300      	movs	r3, #0
 8005188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800518c:	e7a8      	b.n	80050e0 <_printf_i+0x150>
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	462a      	mov	r2, r5
 8005192:	4649      	mov	r1, r9
 8005194:	4640      	mov	r0, r8
 8005196:	47d0      	blx	sl
 8005198:	3001      	adds	r0, #1
 800519a:	d0ab      	beq.n	80050f4 <_printf_i+0x164>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	079b      	lsls	r3, r3, #30
 80051a0:	d413      	bmi.n	80051ca <_printf_i+0x23a>
 80051a2:	68e0      	ldr	r0, [r4, #12]
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	4298      	cmp	r0, r3
 80051a8:	bfb8      	it	lt
 80051aa:	4618      	movlt	r0, r3
 80051ac:	e7a4      	b.n	80050f8 <_printf_i+0x168>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4632      	mov	r2, r6
 80051b2:	4649      	mov	r1, r9
 80051b4:	4640      	mov	r0, r8
 80051b6:	47d0      	blx	sl
 80051b8:	3001      	adds	r0, #1
 80051ba:	d09b      	beq.n	80050f4 <_printf_i+0x164>
 80051bc:	3501      	adds	r5, #1
 80051be:	68e3      	ldr	r3, [r4, #12]
 80051c0:	9903      	ldr	r1, [sp, #12]
 80051c2:	1a5b      	subs	r3, r3, r1
 80051c4:	42ab      	cmp	r3, r5
 80051c6:	dcf2      	bgt.n	80051ae <_printf_i+0x21e>
 80051c8:	e7eb      	b.n	80051a2 <_printf_i+0x212>
 80051ca:	2500      	movs	r5, #0
 80051cc:	f104 0619 	add.w	r6, r4, #25
 80051d0:	e7f5      	b.n	80051be <_printf_i+0x22e>
 80051d2:	bf00      	nop
 80051d4:	0800632d 	.word	0x0800632d
 80051d8:	0800633e 	.word	0x0800633e

080051dc <memcpy>:
 80051dc:	440a      	add	r2, r1
 80051de:	4291      	cmp	r1, r2
 80051e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e4:	d100      	bne.n	80051e8 <memcpy+0xc>
 80051e6:	4770      	bx	lr
 80051e8:	b510      	push	{r4, lr}
 80051ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051f2:	4291      	cmp	r1, r2
 80051f4:	d1f9      	bne.n	80051ea <memcpy+0xe>
 80051f6:	bd10      	pop	{r4, pc}

080051f8 <memmove>:
 80051f8:	4288      	cmp	r0, r1
 80051fa:	b510      	push	{r4, lr}
 80051fc:	eb01 0402 	add.w	r4, r1, r2
 8005200:	d902      	bls.n	8005208 <memmove+0x10>
 8005202:	4284      	cmp	r4, r0
 8005204:	4623      	mov	r3, r4
 8005206:	d807      	bhi.n	8005218 <memmove+0x20>
 8005208:	1e43      	subs	r3, r0, #1
 800520a:	42a1      	cmp	r1, r4
 800520c:	d008      	beq.n	8005220 <memmove+0x28>
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005216:	e7f8      	b.n	800520a <memmove+0x12>
 8005218:	4402      	add	r2, r0
 800521a:	4601      	mov	r1, r0
 800521c:	428a      	cmp	r2, r1
 800521e:	d100      	bne.n	8005222 <memmove+0x2a>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522a:	e7f7      	b.n	800521c <memmove+0x24>

0800522c <_free_r>:
 800522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800522e:	2900      	cmp	r1, #0
 8005230:	d044      	beq.n	80052bc <_free_r+0x90>
 8005232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005236:	9001      	str	r0, [sp, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f1a1 0404 	sub.w	r4, r1, #4
 800523e:	bfb8      	it	lt
 8005240:	18e4      	addlt	r4, r4, r3
 8005242:	f000 f913 	bl	800546c <__malloc_lock>
 8005246:	4a1e      	ldr	r2, [pc, #120]	; (80052c0 <_free_r+0x94>)
 8005248:	9801      	ldr	r0, [sp, #4]
 800524a:	6813      	ldr	r3, [r2, #0]
 800524c:	b933      	cbnz	r3, 800525c <_free_r+0x30>
 800524e:	6063      	str	r3, [r4, #4]
 8005250:	6014      	str	r4, [r2, #0]
 8005252:	b003      	add	sp, #12
 8005254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005258:	f000 b90e 	b.w	8005478 <__malloc_unlock>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d908      	bls.n	8005272 <_free_r+0x46>
 8005260:	6825      	ldr	r5, [r4, #0]
 8005262:	1961      	adds	r1, r4, r5
 8005264:	428b      	cmp	r3, r1
 8005266:	bf01      	itttt	eq
 8005268:	6819      	ldreq	r1, [r3, #0]
 800526a:	685b      	ldreq	r3, [r3, #4]
 800526c:	1949      	addeq	r1, r1, r5
 800526e:	6021      	streq	r1, [r4, #0]
 8005270:	e7ed      	b.n	800524e <_free_r+0x22>
 8005272:	461a      	mov	r2, r3
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b10b      	cbz	r3, 800527c <_free_r+0x50>
 8005278:	42a3      	cmp	r3, r4
 800527a:	d9fa      	bls.n	8005272 <_free_r+0x46>
 800527c:	6811      	ldr	r1, [r2, #0]
 800527e:	1855      	adds	r5, r2, r1
 8005280:	42a5      	cmp	r5, r4
 8005282:	d10b      	bne.n	800529c <_free_r+0x70>
 8005284:	6824      	ldr	r4, [r4, #0]
 8005286:	4421      	add	r1, r4
 8005288:	1854      	adds	r4, r2, r1
 800528a:	42a3      	cmp	r3, r4
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	d1e0      	bne.n	8005252 <_free_r+0x26>
 8005290:	681c      	ldr	r4, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	6053      	str	r3, [r2, #4]
 8005296:	4421      	add	r1, r4
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	e7da      	b.n	8005252 <_free_r+0x26>
 800529c:	d902      	bls.n	80052a4 <_free_r+0x78>
 800529e:	230c      	movs	r3, #12
 80052a0:	6003      	str	r3, [r0, #0]
 80052a2:	e7d6      	b.n	8005252 <_free_r+0x26>
 80052a4:	6825      	ldr	r5, [r4, #0]
 80052a6:	1961      	adds	r1, r4, r5
 80052a8:	428b      	cmp	r3, r1
 80052aa:	bf04      	itt	eq
 80052ac:	6819      	ldreq	r1, [r3, #0]
 80052ae:	685b      	ldreq	r3, [r3, #4]
 80052b0:	6063      	str	r3, [r4, #4]
 80052b2:	bf04      	itt	eq
 80052b4:	1949      	addeq	r1, r1, r5
 80052b6:	6021      	streq	r1, [r4, #0]
 80052b8:	6054      	str	r4, [r2, #4]
 80052ba:	e7ca      	b.n	8005252 <_free_r+0x26>
 80052bc:	b003      	add	sp, #12
 80052be:	bd30      	pop	{r4, r5, pc}
 80052c0:	2000024c 	.word	0x2000024c

080052c4 <sbrk_aligned>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	4e0e      	ldr	r6, [pc, #56]	; (8005300 <sbrk_aligned+0x3c>)
 80052c8:	460c      	mov	r4, r1
 80052ca:	6831      	ldr	r1, [r6, #0]
 80052cc:	4605      	mov	r5, r0
 80052ce:	b911      	cbnz	r1, 80052d6 <sbrk_aligned+0x12>
 80052d0:	f000 f8bc 	bl	800544c <_sbrk_r>
 80052d4:	6030      	str	r0, [r6, #0]
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f8b7 	bl	800544c <_sbrk_r>
 80052de:	1c43      	adds	r3, r0, #1
 80052e0:	d00a      	beq.n	80052f8 <sbrk_aligned+0x34>
 80052e2:	1cc4      	adds	r4, r0, #3
 80052e4:	f024 0403 	bic.w	r4, r4, #3
 80052e8:	42a0      	cmp	r0, r4
 80052ea:	d007      	beq.n	80052fc <sbrk_aligned+0x38>
 80052ec:	1a21      	subs	r1, r4, r0
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 f8ac 	bl	800544c <_sbrk_r>
 80052f4:	3001      	adds	r0, #1
 80052f6:	d101      	bne.n	80052fc <sbrk_aligned+0x38>
 80052f8:	f04f 34ff 	mov.w	r4, #4294967295
 80052fc:	4620      	mov	r0, r4
 80052fe:	bd70      	pop	{r4, r5, r6, pc}
 8005300:	20000250 	.word	0x20000250

08005304 <_malloc_r>:
 8005304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005308:	1ccd      	adds	r5, r1, #3
 800530a:	f025 0503 	bic.w	r5, r5, #3
 800530e:	3508      	adds	r5, #8
 8005310:	2d0c      	cmp	r5, #12
 8005312:	bf38      	it	cc
 8005314:	250c      	movcc	r5, #12
 8005316:	2d00      	cmp	r5, #0
 8005318:	4607      	mov	r7, r0
 800531a:	db01      	blt.n	8005320 <_malloc_r+0x1c>
 800531c:	42a9      	cmp	r1, r5
 800531e:	d905      	bls.n	800532c <_malloc_r+0x28>
 8005320:	230c      	movs	r3, #12
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	2600      	movs	r6, #0
 8005326:	4630      	mov	r0, r6
 8005328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800532c:	4e2e      	ldr	r6, [pc, #184]	; (80053e8 <_malloc_r+0xe4>)
 800532e:	f000 f89d 	bl	800546c <__malloc_lock>
 8005332:	6833      	ldr	r3, [r6, #0]
 8005334:	461c      	mov	r4, r3
 8005336:	bb34      	cbnz	r4, 8005386 <_malloc_r+0x82>
 8005338:	4629      	mov	r1, r5
 800533a:	4638      	mov	r0, r7
 800533c:	f7ff ffc2 	bl	80052c4 <sbrk_aligned>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	4604      	mov	r4, r0
 8005344:	d14d      	bne.n	80053e2 <_malloc_r+0xde>
 8005346:	6834      	ldr	r4, [r6, #0]
 8005348:	4626      	mov	r6, r4
 800534a:	2e00      	cmp	r6, #0
 800534c:	d140      	bne.n	80053d0 <_malloc_r+0xcc>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	4631      	mov	r1, r6
 8005352:	4638      	mov	r0, r7
 8005354:	eb04 0803 	add.w	r8, r4, r3
 8005358:	f000 f878 	bl	800544c <_sbrk_r>
 800535c:	4580      	cmp	r8, r0
 800535e:	d13a      	bne.n	80053d6 <_malloc_r+0xd2>
 8005360:	6821      	ldr	r1, [r4, #0]
 8005362:	3503      	adds	r5, #3
 8005364:	1a6d      	subs	r5, r5, r1
 8005366:	f025 0503 	bic.w	r5, r5, #3
 800536a:	3508      	adds	r5, #8
 800536c:	2d0c      	cmp	r5, #12
 800536e:	bf38      	it	cc
 8005370:	250c      	movcc	r5, #12
 8005372:	4629      	mov	r1, r5
 8005374:	4638      	mov	r0, r7
 8005376:	f7ff ffa5 	bl	80052c4 <sbrk_aligned>
 800537a:	3001      	adds	r0, #1
 800537c:	d02b      	beq.n	80053d6 <_malloc_r+0xd2>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	442b      	add	r3, r5
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	e00e      	b.n	80053a4 <_malloc_r+0xa0>
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	1b52      	subs	r2, r2, r5
 800538a:	d41e      	bmi.n	80053ca <_malloc_r+0xc6>
 800538c:	2a0b      	cmp	r2, #11
 800538e:	d916      	bls.n	80053be <_malloc_r+0xba>
 8005390:	1961      	adds	r1, r4, r5
 8005392:	42a3      	cmp	r3, r4
 8005394:	6025      	str	r5, [r4, #0]
 8005396:	bf18      	it	ne
 8005398:	6059      	strne	r1, [r3, #4]
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	bf08      	it	eq
 800539e:	6031      	streq	r1, [r6, #0]
 80053a0:	5162      	str	r2, [r4, r5]
 80053a2:	604b      	str	r3, [r1, #4]
 80053a4:	4638      	mov	r0, r7
 80053a6:	f104 060b 	add.w	r6, r4, #11
 80053aa:	f000 f865 	bl	8005478 <__malloc_unlock>
 80053ae:	f026 0607 	bic.w	r6, r6, #7
 80053b2:	1d23      	adds	r3, r4, #4
 80053b4:	1af2      	subs	r2, r6, r3
 80053b6:	d0b6      	beq.n	8005326 <_malloc_r+0x22>
 80053b8:	1b9b      	subs	r3, r3, r6
 80053ba:	50a3      	str	r3, [r4, r2]
 80053bc:	e7b3      	b.n	8005326 <_malloc_r+0x22>
 80053be:	6862      	ldr	r2, [r4, #4]
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	bf0c      	ite	eq
 80053c4:	6032      	streq	r2, [r6, #0]
 80053c6:	605a      	strne	r2, [r3, #4]
 80053c8:	e7ec      	b.n	80053a4 <_malloc_r+0xa0>
 80053ca:	4623      	mov	r3, r4
 80053cc:	6864      	ldr	r4, [r4, #4]
 80053ce:	e7b2      	b.n	8005336 <_malloc_r+0x32>
 80053d0:	4634      	mov	r4, r6
 80053d2:	6876      	ldr	r6, [r6, #4]
 80053d4:	e7b9      	b.n	800534a <_malloc_r+0x46>
 80053d6:	230c      	movs	r3, #12
 80053d8:	603b      	str	r3, [r7, #0]
 80053da:	4638      	mov	r0, r7
 80053dc:	f000 f84c 	bl	8005478 <__malloc_unlock>
 80053e0:	e7a1      	b.n	8005326 <_malloc_r+0x22>
 80053e2:	6025      	str	r5, [r4, #0]
 80053e4:	e7de      	b.n	80053a4 <_malloc_r+0xa0>
 80053e6:	bf00      	nop
 80053e8:	2000024c 	.word	0x2000024c

080053ec <_realloc_r>:
 80053ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f0:	4680      	mov	r8, r0
 80053f2:	4614      	mov	r4, r2
 80053f4:	460e      	mov	r6, r1
 80053f6:	b921      	cbnz	r1, 8005402 <_realloc_r+0x16>
 80053f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053fc:	4611      	mov	r1, r2
 80053fe:	f7ff bf81 	b.w	8005304 <_malloc_r>
 8005402:	b92a      	cbnz	r2, 8005410 <_realloc_r+0x24>
 8005404:	f7ff ff12 	bl	800522c <_free_r>
 8005408:	4625      	mov	r5, r4
 800540a:	4628      	mov	r0, r5
 800540c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005410:	f000 f838 	bl	8005484 <_malloc_usable_size_r>
 8005414:	4284      	cmp	r4, r0
 8005416:	4607      	mov	r7, r0
 8005418:	d802      	bhi.n	8005420 <_realloc_r+0x34>
 800541a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800541e:	d812      	bhi.n	8005446 <_realloc_r+0x5a>
 8005420:	4621      	mov	r1, r4
 8005422:	4640      	mov	r0, r8
 8005424:	f7ff ff6e 	bl	8005304 <_malloc_r>
 8005428:	4605      	mov	r5, r0
 800542a:	2800      	cmp	r0, #0
 800542c:	d0ed      	beq.n	800540a <_realloc_r+0x1e>
 800542e:	42bc      	cmp	r4, r7
 8005430:	4622      	mov	r2, r4
 8005432:	4631      	mov	r1, r6
 8005434:	bf28      	it	cs
 8005436:	463a      	movcs	r2, r7
 8005438:	f7ff fed0 	bl	80051dc <memcpy>
 800543c:	4631      	mov	r1, r6
 800543e:	4640      	mov	r0, r8
 8005440:	f7ff fef4 	bl	800522c <_free_r>
 8005444:	e7e1      	b.n	800540a <_realloc_r+0x1e>
 8005446:	4635      	mov	r5, r6
 8005448:	e7df      	b.n	800540a <_realloc_r+0x1e>
	...

0800544c <_sbrk_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d06      	ldr	r5, [pc, #24]	; (8005468 <_sbrk_r+0x1c>)
 8005450:	2300      	movs	r3, #0
 8005452:	4604      	mov	r4, r0
 8005454:	4608      	mov	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fd f9d4 	bl	8002804 <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d102      	bne.n	8005466 <_sbrk_r+0x1a>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	b103      	cbz	r3, 8005466 <_sbrk_r+0x1a>
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	20000254 	.word	0x20000254

0800546c <__malloc_lock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_lock+0x8>)
 800546e:	f000 b811 	b.w	8005494 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	20000258 	.word	0x20000258

08005478 <__malloc_unlock>:
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <__malloc_unlock+0x8>)
 800547a:	f000 b80c 	b.w	8005496 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	20000258 	.word	0x20000258

08005484 <_malloc_usable_size_r>:
 8005484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005488:	1f18      	subs	r0, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	bfbc      	itt	lt
 800548e:	580b      	ldrlt	r3, [r1, r0]
 8005490:	18c0      	addlt	r0, r0, r3
 8005492:	4770      	bx	lr

08005494 <__retarget_lock_acquire_recursive>:
 8005494:	4770      	bx	lr

08005496 <__retarget_lock_release_recursive>:
 8005496:	4770      	bx	lr

08005498 <pow>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	ed2d 8b02 	vpush	{d8}
 800549e:	eeb0 8a40 	vmov.f32	s16, s0
 80054a2:	eef0 8a60 	vmov.f32	s17, s1
 80054a6:	ec55 4b11 	vmov	r4, r5, d1
 80054aa:	f000 f865 	bl	8005578 <__ieee754_pow>
 80054ae:	4622      	mov	r2, r4
 80054b0:	462b      	mov	r3, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	ec57 6b10 	vmov	r6, r7, d0
 80054ba:	f7fb fb4f 	bl	8000b5c <__aeabi_dcmpun>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d13b      	bne.n	800553a <pow+0xa2>
 80054c2:	ec51 0b18 	vmov	r0, r1, d8
 80054c6:	2200      	movs	r2, #0
 80054c8:	2300      	movs	r3, #0
 80054ca:	f7fb fb15 	bl	8000af8 <__aeabi_dcmpeq>
 80054ce:	b1b8      	cbz	r0, 8005500 <pow+0x68>
 80054d0:	2200      	movs	r2, #0
 80054d2:	2300      	movs	r3, #0
 80054d4:	4620      	mov	r0, r4
 80054d6:	4629      	mov	r1, r5
 80054d8:	f7fb fb0e 	bl	8000af8 <__aeabi_dcmpeq>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d146      	bne.n	800556e <pow+0xd6>
 80054e0:	ec45 4b10 	vmov	d0, r4, r5
 80054e4:	f000 fe61 	bl	80061aa <finite>
 80054e8:	b338      	cbz	r0, 800553a <pow+0xa2>
 80054ea:	2200      	movs	r2, #0
 80054ec:	2300      	movs	r3, #0
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb fb0b 	bl	8000b0c <__aeabi_dcmplt>
 80054f6:	b300      	cbz	r0, 800553a <pow+0xa2>
 80054f8:	f7ff fb1a 	bl	8004b30 <__errno>
 80054fc:	2322      	movs	r3, #34	; 0x22
 80054fe:	e01b      	b.n	8005538 <pow+0xa0>
 8005500:	ec47 6b10 	vmov	d0, r6, r7
 8005504:	f000 fe51 	bl	80061aa <finite>
 8005508:	b9e0      	cbnz	r0, 8005544 <pow+0xac>
 800550a:	eeb0 0a48 	vmov.f32	s0, s16
 800550e:	eef0 0a68 	vmov.f32	s1, s17
 8005512:	f000 fe4a 	bl	80061aa <finite>
 8005516:	b1a8      	cbz	r0, 8005544 <pow+0xac>
 8005518:	ec45 4b10 	vmov	d0, r4, r5
 800551c:	f000 fe45 	bl	80061aa <finite>
 8005520:	b180      	cbz	r0, 8005544 <pow+0xac>
 8005522:	4632      	mov	r2, r6
 8005524:	463b      	mov	r3, r7
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fb fb17 	bl	8000b5c <__aeabi_dcmpun>
 800552e:	2800      	cmp	r0, #0
 8005530:	d0e2      	beq.n	80054f8 <pow+0x60>
 8005532:	f7ff fafd 	bl	8004b30 <__errno>
 8005536:	2321      	movs	r3, #33	; 0x21
 8005538:	6003      	str	r3, [r0, #0]
 800553a:	ecbd 8b02 	vpop	{d8}
 800553e:	ec47 6b10 	vmov	d0, r6, r7
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005544:	2200      	movs	r2, #0
 8005546:	2300      	movs	r3, #0
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fb fad4 	bl	8000af8 <__aeabi_dcmpeq>
 8005550:	2800      	cmp	r0, #0
 8005552:	d0f2      	beq.n	800553a <pow+0xa2>
 8005554:	eeb0 0a48 	vmov.f32	s0, s16
 8005558:	eef0 0a68 	vmov.f32	s1, s17
 800555c:	f000 fe25 	bl	80061aa <finite>
 8005560:	2800      	cmp	r0, #0
 8005562:	d0ea      	beq.n	800553a <pow+0xa2>
 8005564:	ec45 4b10 	vmov	d0, r4, r5
 8005568:	f000 fe1f 	bl	80061aa <finite>
 800556c:	e7c3      	b.n	80054f6 <pow+0x5e>
 800556e:	4f01      	ldr	r7, [pc, #4]	; (8005574 <pow+0xdc>)
 8005570:	2600      	movs	r6, #0
 8005572:	e7e2      	b.n	800553a <pow+0xa2>
 8005574:	3ff00000 	.word	0x3ff00000

08005578 <__ieee754_pow>:
 8005578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557c:	ed2d 8b06 	vpush	{d8-d10}
 8005580:	b089      	sub	sp, #36	; 0x24
 8005582:	ed8d 1b00 	vstr	d1, [sp]
 8005586:	e9dd 2900 	ldrd	r2, r9, [sp]
 800558a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800558e:	ea58 0102 	orrs.w	r1, r8, r2
 8005592:	ec57 6b10 	vmov	r6, r7, d0
 8005596:	d115      	bne.n	80055c4 <__ieee754_pow+0x4c>
 8005598:	19b3      	adds	r3, r6, r6
 800559a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800559e:	4152      	adcs	r2, r2
 80055a0:	4299      	cmp	r1, r3
 80055a2:	4b89      	ldr	r3, [pc, #548]	; (80057c8 <__ieee754_pow+0x250>)
 80055a4:	4193      	sbcs	r3, r2
 80055a6:	f080 84d2 	bcs.w	8005f4e <__ieee754_pow+0x9d6>
 80055aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ae:	4630      	mov	r0, r6
 80055b0:	4639      	mov	r1, r7
 80055b2:	f7fa fe83 	bl	80002bc <__adddf3>
 80055b6:	ec41 0b10 	vmov	d0, r0, r1
 80055ba:	b009      	add	sp, #36	; 0x24
 80055bc:	ecbd 8b06 	vpop	{d8-d10}
 80055c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c4:	4b81      	ldr	r3, [pc, #516]	; (80057cc <__ieee754_pow+0x254>)
 80055c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80055ca:	429c      	cmp	r4, r3
 80055cc:	ee10 aa10 	vmov	sl, s0
 80055d0:	463d      	mov	r5, r7
 80055d2:	dc06      	bgt.n	80055e2 <__ieee754_pow+0x6a>
 80055d4:	d101      	bne.n	80055da <__ieee754_pow+0x62>
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	d1e7      	bne.n	80055aa <__ieee754_pow+0x32>
 80055da:	4598      	cmp	r8, r3
 80055dc:	dc01      	bgt.n	80055e2 <__ieee754_pow+0x6a>
 80055de:	d10f      	bne.n	8005600 <__ieee754_pow+0x88>
 80055e0:	b172      	cbz	r2, 8005600 <__ieee754_pow+0x88>
 80055e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80055e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80055ea:	ea55 050a 	orrs.w	r5, r5, sl
 80055ee:	d1dc      	bne.n	80055aa <__ieee754_pow+0x32>
 80055f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80055f4:	18db      	adds	r3, r3, r3
 80055f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80055fa:	4152      	adcs	r2, r2
 80055fc:	429d      	cmp	r5, r3
 80055fe:	e7d0      	b.n	80055a2 <__ieee754_pow+0x2a>
 8005600:	2d00      	cmp	r5, #0
 8005602:	da3b      	bge.n	800567c <__ieee754_pow+0x104>
 8005604:	4b72      	ldr	r3, [pc, #456]	; (80057d0 <__ieee754_pow+0x258>)
 8005606:	4598      	cmp	r8, r3
 8005608:	dc51      	bgt.n	80056ae <__ieee754_pow+0x136>
 800560a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800560e:	4598      	cmp	r8, r3
 8005610:	f340 84ac 	ble.w	8005f6c <__ieee754_pow+0x9f4>
 8005614:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005618:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800561c:	2b14      	cmp	r3, #20
 800561e:	dd0f      	ble.n	8005640 <__ieee754_pow+0xc8>
 8005620:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005624:	fa22 f103 	lsr.w	r1, r2, r3
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	4293      	cmp	r3, r2
 800562e:	f040 849d 	bne.w	8005f6c <__ieee754_pow+0x9f4>
 8005632:	f001 0101 	and.w	r1, r1, #1
 8005636:	f1c1 0302 	rsb	r3, r1, #2
 800563a:	9304      	str	r3, [sp, #16]
 800563c:	b182      	cbz	r2, 8005660 <__ieee754_pow+0xe8>
 800563e:	e05f      	b.n	8005700 <__ieee754_pow+0x188>
 8005640:	2a00      	cmp	r2, #0
 8005642:	d15b      	bne.n	80056fc <__ieee754_pow+0x184>
 8005644:	f1c3 0314 	rsb	r3, r3, #20
 8005648:	fa48 f103 	asr.w	r1, r8, r3
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	4543      	cmp	r3, r8
 8005652:	f040 8488 	bne.w	8005f66 <__ieee754_pow+0x9ee>
 8005656:	f001 0101 	and.w	r1, r1, #1
 800565a:	f1c1 0302 	rsb	r3, r1, #2
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	4b5c      	ldr	r3, [pc, #368]	; (80057d4 <__ieee754_pow+0x25c>)
 8005662:	4598      	cmp	r8, r3
 8005664:	d132      	bne.n	80056cc <__ieee754_pow+0x154>
 8005666:	f1b9 0f00 	cmp.w	r9, #0
 800566a:	f280 8478 	bge.w	8005f5e <__ieee754_pow+0x9e6>
 800566e:	4959      	ldr	r1, [pc, #356]	; (80057d4 <__ieee754_pow+0x25c>)
 8005670:	4632      	mov	r2, r6
 8005672:	463b      	mov	r3, r7
 8005674:	2000      	movs	r0, #0
 8005676:	f7fb f901 	bl	800087c <__aeabi_ddiv>
 800567a:	e79c      	b.n	80055b6 <__ieee754_pow+0x3e>
 800567c:	2300      	movs	r3, #0
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	2a00      	cmp	r2, #0
 8005682:	d13d      	bne.n	8005700 <__ieee754_pow+0x188>
 8005684:	4b51      	ldr	r3, [pc, #324]	; (80057cc <__ieee754_pow+0x254>)
 8005686:	4598      	cmp	r8, r3
 8005688:	d1ea      	bne.n	8005660 <__ieee754_pow+0xe8>
 800568a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800568e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005692:	ea53 030a 	orrs.w	r3, r3, sl
 8005696:	f000 845a 	beq.w	8005f4e <__ieee754_pow+0x9d6>
 800569a:	4b4f      	ldr	r3, [pc, #316]	; (80057d8 <__ieee754_pow+0x260>)
 800569c:	429c      	cmp	r4, r3
 800569e:	dd08      	ble.n	80056b2 <__ieee754_pow+0x13a>
 80056a0:	f1b9 0f00 	cmp.w	r9, #0
 80056a4:	f2c0 8457 	blt.w	8005f56 <__ieee754_pow+0x9de>
 80056a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ac:	e783      	b.n	80055b6 <__ieee754_pow+0x3e>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e7e5      	b.n	800567e <__ieee754_pow+0x106>
 80056b2:	f1b9 0f00 	cmp.w	r9, #0
 80056b6:	f04f 0000 	mov.w	r0, #0
 80056ba:	f04f 0100 	mov.w	r1, #0
 80056be:	f6bf af7a 	bge.w	80055b6 <__ieee754_pow+0x3e>
 80056c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80056c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80056ca:	e774      	b.n	80055b6 <__ieee754_pow+0x3e>
 80056cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80056d0:	d106      	bne.n	80056e0 <__ieee754_pow+0x168>
 80056d2:	4632      	mov	r2, r6
 80056d4:	463b      	mov	r3, r7
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	f7fa ffa5 	bl	8000628 <__aeabi_dmul>
 80056de:	e76a      	b.n	80055b6 <__ieee754_pow+0x3e>
 80056e0:	4b3e      	ldr	r3, [pc, #248]	; (80057dc <__ieee754_pow+0x264>)
 80056e2:	4599      	cmp	r9, r3
 80056e4:	d10c      	bne.n	8005700 <__ieee754_pow+0x188>
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	db0a      	blt.n	8005700 <__ieee754_pow+0x188>
 80056ea:	ec47 6b10 	vmov	d0, r6, r7
 80056ee:	b009      	add	sp, #36	; 0x24
 80056f0:	ecbd 8b06 	vpop	{d8-d10}
 80056f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f8:	f000 bc6c 	b.w	8005fd4 <__ieee754_sqrt>
 80056fc:	2300      	movs	r3, #0
 80056fe:	9304      	str	r3, [sp, #16]
 8005700:	ec47 6b10 	vmov	d0, r6, r7
 8005704:	f000 fd48 	bl	8006198 <fabs>
 8005708:	ec51 0b10 	vmov	r0, r1, d0
 800570c:	f1ba 0f00 	cmp.w	sl, #0
 8005710:	d129      	bne.n	8005766 <__ieee754_pow+0x1ee>
 8005712:	b124      	cbz	r4, 800571e <__ieee754_pow+0x1a6>
 8005714:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <__ieee754_pow+0x25c>)
 8005716:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800571a:	429a      	cmp	r2, r3
 800571c:	d123      	bne.n	8005766 <__ieee754_pow+0x1ee>
 800571e:	f1b9 0f00 	cmp.w	r9, #0
 8005722:	da05      	bge.n	8005730 <__ieee754_pow+0x1b8>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	2000      	movs	r0, #0
 800572a:	492a      	ldr	r1, [pc, #168]	; (80057d4 <__ieee754_pow+0x25c>)
 800572c:	f7fb f8a6 	bl	800087c <__aeabi_ddiv>
 8005730:	2d00      	cmp	r5, #0
 8005732:	f6bf af40 	bge.w	80055b6 <__ieee754_pow+0x3e>
 8005736:	9b04      	ldr	r3, [sp, #16]
 8005738:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800573c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005740:	4323      	orrs	r3, r4
 8005742:	d108      	bne.n	8005756 <__ieee754_pow+0x1de>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4610      	mov	r0, r2
 800574a:	4619      	mov	r1, r3
 800574c:	f7fa fdb4 	bl	80002b8 <__aeabi_dsub>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	e78f      	b.n	8005676 <__ieee754_pow+0xfe>
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	2b01      	cmp	r3, #1
 800575a:	f47f af2c 	bne.w	80055b6 <__ieee754_pow+0x3e>
 800575e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005762:	4619      	mov	r1, r3
 8005764:	e727      	b.n	80055b6 <__ieee754_pow+0x3e>
 8005766:	0feb      	lsrs	r3, r5, #31
 8005768:	3b01      	subs	r3, #1
 800576a:	9306      	str	r3, [sp, #24]
 800576c:	9a06      	ldr	r2, [sp, #24]
 800576e:	9b04      	ldr	r3, [sp, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	d102      	bne.n	800577a <__ieee754_pow+0x202>
 8005774:	4632      	mov	r2, r6
 8005776:	463b      	mov	r3, r7
 8005778:	e7e6      	b.n	8005748 <__ieee754_pow+0x1d0>
 800577a:	4b19      	ldr	r3, [pc, #100]	; (80057e0 <__ieee754_pow+0x268>)
 800577c:	4598      	cmp	r8, r3
 800577e:	f340 80fb 	ble.w	8005978 <__ieee754_pow+0x400>
 8005782:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005786:	4598      	cmp	r8, r3
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <__ieee754_pow+0x260>)
 800578a:	dd0c      	ble.n	80057a6 <__ieee754_pow+0x22e>
 800578c:	429c      	cmp	r4, r3
 800578e:	dc0f      	bgt.n	80057b0 <__ieee754_pow+0x238>
 8005790:	f1b9 0f00 	cmp.w	r9, #0
 8005794:	da0f      	bge.n	80057b6 <__ieee754_pow+0x23e>
 8005796:	2000      	movs	r0, #0
 8005798:	b009      	add	sp, #36	; 0x24
 800579a:	ecbd 8b06 	vpop	{d8-d10}
 800579e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a2:	f000 bcf0 	b.w	8006186 <__math_oflow>
 80057a6:	429c      	cmp	r4, r3
 80057a8:	dbf2      	blt.n	8005790 <__ieee754_pow+0x218>
 80057aa:	4b0a      	ldr	r3, [pc, #40]	; (80057d4 <__ieee754_pow+0x25c>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	dd19      	ble.n	80057e4 <__ieee754_pow+0x26c>
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	dcef      	bgt.n	8005796 <__ieee754_pow+0x21e>
 80057b6:	2000      	movs	r0, #0
 80057b8:	b009      	add	sp, #36	; 0x24
 80057ba:	ecbd 8b06 	vpop	{d8-d10}
 80057be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c2:	f000 bcd7 	b.w	8006174 <__math_uflow>
 80057c6:	bf00      	nop
 80057c8:	fff00000 	.word	0xfff00000
 80057cc:	7ff00000 	.word	0x7ff00000
 80057d0:	433fffff 	.word	0x433fffff
 80057d4:	3ff00000 	.word	0x3ff00000
 80057d8:	3fefffff 	.word	0x3fefffff
 80057dc:	3fe00000 	.word	0x3fe00000
 80057e0:	41e00000 	.word	0x41e00000
 80057e4:	4b60      	ldr	r3, [pc, #384]	; (8005968 <__ieee754_pow+0x3f0>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	f7fa fd66 	bl	80002b8 <__aeabi_dsub>
 80057ec:	a354      	add	r3, pc, #336	; (adr r3, 8005940 <__ieee754_pow+0x3c8>)
 80057ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f2:	4604      	mov	r4, r0
 80057f4:	460d      	mov	r5, r1
 80057f6:	f7fa ff17 	bl	8000628 <__aeabi_dmul>
 80057fa:	a353      	add	r3, pc, #332	; (adr r3, 8005948 <__ieee754_pow+0x3d0>)
 80057fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005800:	4606      	mov	r6, r0
 8005802:	460f      	mov	r7, r1
 8005804:	4620      	mov	r0, r4
 8005806:	4629      	mov	r1, r5
 8005808:	f7fa ff0e 	bl	8000628 <__aeabi_dmul>
 800580c:	4b57      	ldr	r3, [pc, #348]	; (800596c <__ieee754_pow+0x3f4>)
 800580e:	4682      	mov	sl, r0
 8005810:	468b      	mov	fp, r1
 8005812:	2200      	movs	r2, #0
 8005814:	4620      	mov	r0, r4
 8005816:	4629      	mov	r1, r5
 8005818:	f7fa ff06 	bl	8000628 <__aeabi_dmul>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	a14b      	add	r1, pc, #300	; (adr r1, 8005950 <__ieee754_pow+0x3d8>)
 8005822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005826:	f7fa fd47 	bl	80002b8 <__aeabi_dsub>
 800582a:	4622      	mov	r2, r4
 800582c:	462b      	mov	r3, r5
 800582e:	f7fa fefb 	bl	8000628 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	2000      	movs	r0, #0
 8005838:	494d      	ldr	r1, [pc, #308]	; (8005970 <__ieee754_pow+0x3f8>)
 800583a:	f7fa fd3d 	bl	80002b8 <__aeabi_dsub>
 800583e:	4622      	mov	r2, r4
 8005840:	4680      	mov	r8, r0
 8005842:	4689      	mov	r9, r1
 8005844:	462b      	mov	r3, r5
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fa feed 	bl	8000628 <__aeabi_dmul>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fa fee7 	bl	8000628 <__aeabi_dmul>
 800585a:	a33f      	add	r3, pc, #252	; (adr r3, 8005958 <__ieee754_pow+0x3e0>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fa fee2 	bl	8000628 <__aeabi_dmul>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4650      	mov	r0, sl
 800586a:	4659      	mov	r1, fp
 800586c:	f7fa fd24 	bl	80002b8 <__aeabi_dsub>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4680      	mov	r8, r0
 8005876:	4689      	mov	r9, r1
 8005878:	4630      	mov	r0, r6
 800587a:	4639      	mov	r1, r7
 800587c:	f7fa fd1e 	bl	80002bc <__adddf3>
 8005880:	2000      	movs	r0, #0
 8005882:	4632      	mov	r2, r6
 8005884:	463b      	mov	r3, r7
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	f7fa fd15 	bl	80002b8 <__aeabi_dsub>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4640      	mov	r0, r8
 8005894:	4649      	mov	r1, r9
 8005896:	f7fa fd0f 	bl	80002b8 <__aeabi_dsub>
 800589a:	9b04      	ldr	r3, [sp, #16]
 800589c:	9a06      	ldr	r2, [sp, #24]
 800589e:	3b01      	subs	r3, #1
 80058a0:	4313      	orrs	r3, r2
 80058a2:	4682      	mov	sl, r0
 80058a4:	468b      	mov	fp, r1
 80058a6:	f040 81e7 	bne.w	8005c78 <__ieee754_pow+0x700>
 80058aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005960 <__ieee754_pow+0x3e8>
 80058ae:	eeb0 8a47 	vmov.f32	s16, s14
 80058b2:	eef0 8a67 	vmov.f32	s17, s15
 80058b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80058ba:	2600      	movs	r6, #0
 80058bc:	4632      	mov	r2, r6
 80058be:	463b      	mov	r3, r7
 80058c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058c4:	f7fa fcf8 	bl	80002b8 <__aeabi_dsub>
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	f7fa feac 	bl	8000628 <__aeabi_dmul>
 80058d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058d4:	4680      	mov	r8, r0
 80058d6:	4689      	mov	r9, r1
 80058d8:	4650      	mov	r0, sl
 80058da:	4659      	mov	r1, fp
 80058dc:	f7fa fea4 	bl	8000628 <__aeabi_dmul>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4640      	mov	r0, r8
 80058e6:	4649      	mov	r1, r9
 80058e8:	f7fa fce8 	bl	80002bc <__adddf3>
 80058ec:	4632      	mov	r2, r6
 80058ee:	463b      	mov	r3, r7
 80058f0:	4680      	mov	r8, r0
 80058f2:	4689      	mov	r9, r1
 80058f4:	4620      	mov	r0, r4
 80058f6:	4629      	mov	r1, r5
 80058f8:	f7fa fe96 	bl	8000628 <__aeabi_dmul>
 80058fc:	460b      	mov	r3, r1
 80058fe:	4604      	mov	r4, r0
 8005900:	460d      	mov	r5, r1
 8005902:	4602      	mov	r2, r0
 8005904:	4649      	mov	r1, r9
 8005906:	4640      	mov	r0, r8
 8005908:	f7fa fcd8 	bl	80002bc <__adddf3>
 800590c:	4b19      	ldr	r3, [pc, #100]	; (8005974 <__ieee754_pow+0x3fc>)
 800590e:	4299      	cmp	r1, r3
 8005910:	ec45 4b19 	vmov	d9, r4, r5
 8005914:	4606      	mov	r6, r0
 8005916:	460f      	mov	r7, r1
 8005918:	468b      	mov	fp, r1
 800591a:	f340 82f1 	ble.w	8005f00 <__ieee754_pow+0x988>
 800591e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005922:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005926:	4303      	orrs	r3, r0
 8005928:	f000 81e4 	beq.w	8005cf4 <__ieee754_pow+0x77c>
 800592c:	ec51 0b18 	vmov	r0, r1, d8
 8005930:	2200      	movs	r2, #0
 8005932:	2300      	movs	r3, #0
 8005934:	f7fb f8ea 	bl	8000b0c <__aeabi_dcmplt>
 8005938:	3800      	subs	r0, #0
 800593a:	bf18      	it	ne
 800593c:	2001      	movne	r0, #1
 800593e:	e72b      	b.n	8005798 <__ieee754_pow+0x220>
 8005940:	60000000 	.word	0x60000000
 8005944:	3ff71547 	.word	0x3ff71547
 8005948:	f85ddf44 	.word	0xf85ddf44
 800594c:	3e54ae0b 	.word	0x3e54ae0b
 8005950:	55555555 	.word	0x55555555
 8005954:	3fd55555 	.word	0x3fd55555
 8005958:	652b82fe 	.word	0x652b82fe
 800595c:	3ff71547 	.word	0x3ff71547
 8005960:	00000000 	.word	0x00000000
 8005964:	bff00000 	.word	0xbff00000
 8005968:	3ff00000 	.word	0x3ff00000
 800596c:	3fd00000 	.word	0x3fd00000
 8005970:	3fe00000 	.word	0x3fe00000
 8005974:	408fffff 	.word	0x408fffff
 8005978:	4bd5      	ldr	r3, [pc, #852]	; (8005cd0 <__ieee754_pow+0x758>)
 800597a:	402b      	ands	r3, r5
 800597c:	2200      	movs	r2, #0
 800597e:	b92b      	cbnz	r3, 800598c <__ieee754_pow+0x414>
 8005980:	4bd4      	ldr	r3, [pc, #848]	; (8005cd4 <__ieee754_pow+0x75c>)
 8005982:	f7fa fe51 	bl	8000628 <__aeabi_dmul>
 8005986:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800598a:	460c      	mov	r4, r1
 800598c:	1523      	asrs	r3, r4, #20
 800598e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005992:	4413      	add	r3, r2
 8005994:	9305      	str	r3, [sp, #20]
 8005996:	4bd0      	ldr	r3, [pc, #832]	; (8005cd8 <__ieee754_pow+0x760>)
 8005998:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800599c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80059a0:	429c      	cmp	r4, r3
 80059a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80059a6:	dd08      	ble.n	80059ba <__ieee754_pow+0x442>
 80059a8:	4bcc      	ldr	r3, [pc, #816]	; (8005cdc <__ieee754_pow+0x764>)
 80059aa:	429c      	cmp	r4, r3
 80059ac:	f340 8162 	ble.w	8005c74 <__ieee754_pow+0x6fc>
 80059b0:	9b05      	ldr	r3, [sp, #20]
 80059b2:	3301      	adds	r3, #1
 80059b4:	9305      	str	r3, [sp, #20]
 80059b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80059ba:	2400      	movs	r4, #0
 80059bc:	00e3      	lsls	r3, r4, #3
 80059be:	9307      	str	r3, [sp, #28]
 80059c0:	4bc7      	ldr	r3, [pc, #796]	; (8005ce0 <__ieee754_pow+0x768>)
 80059c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059c6:	ed93 7b00 	vldr	d7, [r3]
 80059ca:	4629      	mov	r1, r5
 80059cc:	ec53 2b17 	vmov	r2, r3, d7
 80059d0:	eeb0 9a47 	vmov.f32	s18, s14
 80059d4:	eef0 9a67 	vmov.f32	s19, s15
 80059d8:	4682      	mov	sl, r0
 80059da:	f7fa fc6d 	bl	80002b8 <__aeabi_dsub>
 80059de:	4652      	mov	r2, sl
 80059e0:	4606      	mov	r6, r0
 80059e2:	460f      	mov	r7, r1
 80059e4:	462b      	mov	r3, r5
 80059e6:	ec51 0b19 	vmov	r0, r1, d9
 80059ea:	f7fa fc67 	bl	80002bc <__adddf3>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	2000      	movs	r0, #0
 80059f4:	49bb      	ldr	r1, [pc, #748]	; (8005ce4 <__ieee754_pow+0x76c>)
 80059f6:	f7fa ff41 	bl	800087c <__aeabi_ddiv>
 80059fa:	ec41 0b1a 	vmov	d10, r0, r1
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4630      	mov	r0, r6
 8005a04:	4639      	mov	r1, r7
 8005a06:	f7fa fe0f 	bl	8000628 <__aeabi_dmul>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	9302      	str	r3, [sp, #8]
 8005a12:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a16:	46ab      	mov	fp, r5
 8005a18:	106d      	asrs	r5, r5, #1
 8005a1a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005a1e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005a22:	ec41 0b18 	vmov	d8, r0, r1
 8005a26:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4649      	mov	r1, r9
 8005a30:	4614      	mov	r4, r2
 8005a32:	461d      	mov	r5, r3
 8005a34:	f7fa fdf8 	bl	8000628 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fa fc3a 	bl	80002b8 <__aeabi_dsub>
 8005a44:	ec53 2b19 	vmov	r2, r3, d9
 8005a48:	4606      	mov	r6, r0
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fc32 	bl	80002b8 <__aeabi_dsub>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4650      	mov	r0, sl
 8005a5a:	4659      	mov	r1, fp
 8005a5c:	f7fa fc2c 	bl	80002b8 <__aeabi_dsub>
 8005a60:	4642      	mov	r2, r8
 8005a62:	464b      	mov	r3, r9
 8005a64:	f7fa fde0 	bl	8000628 <__aeabi_dmul>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	f7fa fc22 	bl	80002b8 <__aeabi_dsub>
 8005a74:	ec53 2b1a 	vmov	r2, r3, d10
 8005a78:	f7fa fdd6 	bl	8000628 <__aeabi_dmul>
 8005a7c:	ec53 2b18 	vmov	r2, r3, d8
 8005a80:	ec41 0b19 	vmov	d9, r0, r1
 8005a84:	ec51 0b18 	vmov	r0, r1, d8
 8005a88:	f7fa fdce 	bl	8000628 <__aeabi_dmul>
 8005a8c:	a37c      	add	r3, pc, #496	; (adr r3, 8005c80 <__ieee754_pow+0x708>)
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	4604      	mov	r4, r0
 8005a94:	460d      	mov	r5, r1
 8005a96:	f7fa fdc7 	bl	8000628 <__aeabi_dmul>
 8005a9a:	a37b      	add	r3, pc, #492	; (adr r3, 8005c88 <__ieee754_pow+0x710>)
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	f7fa fc0c 	bl	80002bc <__adddf3>
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	462b      	mov	r3, r5
 8005aa8:	f7fa fdbe 	bl	8000628 <__aeabi_dmul>
 8005aac:	a378      	add	r3, pc, #480	; (adr r3, 8005c90 <__ieee754_pow+0x718>)
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f7fa fc03 	bl	80002bc <__adddf3>
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	462b      	mov	r3, r5
 8005aba:	f7fa fdb5 	bl	8000628 <__aeabi_dmul>
 8005abe:	a376      	add	r3, pc, #472	; (adr r3, 8005c98 <__ieee754_pow+0x720>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fbfa 	bl	80002bc <__adddf3>
 8005ac8:	4622      	mov	r2, r4
 8005aca:	462b      	mov	r3, r5
 8005acc:	f7fa fdac 	bl	8000628 <__aeabi_dmul>
 8005ad0:	a373      	add	r3, pc, #460	; (adr r3, 8005ca0 <__ieee754_pow+0x728>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fbf1 	bl	80002bc <__adddf3>
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f7fa fda3 	bl	8000628 <__aeabi_dmul>
 8005ae2:	a371      	add	r3, pc, #452	; (adr r3, 8005ca8 <__ieee754_pow+0x730>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fbe8 	bl	80002bc <__adddf3>
 8005aec:	4622      	mov	r2, r4
 8005aee:	4606      	mov	r6, r0
 8005af0:	460f      	mov	r7, r1
 8005af2:	462b      	mov	r3, r5
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7fa fd96 	bl	8000628 <__aeabi_dmul>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fa fd90 	bl	8000628 <__aeabi_dmul>
 8005b08:	4642      	mov	r2, r8
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	464b      	mov	r3, r9
 8005b10:	ec51 0b18 	vmov	r0, r1, d8
 8005b14:	f7fa fbd2 	bl	80002bc <__adddf3>
 8005b18:	ec53 2b19 	vmov	r2, r3, d9
 8005b1c:	f7fa fd84 	bl	8000628 <__aeabi_dmul>
 8005b20:	4622      	mov	r2, r4
 8005b22:	462b      	mov	r3, r5
 8005b24:	f7fa fbca 	bl	80002bc <__adddf3>
 8005b28:	4642      	mov	r2, r8
 8005b2a:	4682      	mov	sl, r0
 8005b2c:	468b      	mov	fp, r1
 8005b2e:	464b      	mov	r3, r9
 8005b30:	4640      	mov	r0, r8
 8005b32:	4649      	mov	r1, r9
 8005b34:	f7fa fd78 	bl	8000628 <__aeabi_dmul>
 8005b38:	4b6b      	ldr	r3, [pc, #428]	; (8005ce8 <__ieee754_pow+0x770>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	460f      	mov	r7, r1
 8005b40:	f7fa fbbc 	bl	80002bc <__adddf3>
 8005b44:	4652      	mov	r2, sl
 8005b46:	465b      	mov	r3, fp
 8005b48:	f7fa fbb8 	bl	80002bc <__adddf3>
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	4640      	mov	r0, r8
 8005b58:	4649      	mov	r1, r9
 8005b5a:	f7fa fd65 	bl	8000628 <__aeabi_dmul>
 8005b5e:	4b62      	ldr	r3, [pc, #392]	; (8005ce8 <__ieee754_pow+0x770>)
 8005b60:	4680      	mov	r8, r0
 8005b62:	4689      	mov	r9, r1
 8005b64:	2200      	movs	r2, #0
 8005b66:	4620      	mov	r0, r4
 8005b68:	4629      	mov	r1, r5
 8005b6a:	f7fa fba5 	bl	80002b8 <__aeabi_dsub>
 8005b6e:	4632      	mov	r2, r6
 8005b70:	463b      	mov	r3, r7
 8005b72:	f7fa fba1 	bl	80002b8 <__aeabi_dsub>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	f7fa fb9b 	bl	80002b8 <__aeabi_dsub>
 8005b82:	ec53 2b18 	vmov	r2, r3, d8
 8005b86:	f7fa fd4f 	bl	8000628 <__aeabi_dmul>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	460f      	mov	r7, r1
 8005b90:	462b      	mov	r3, r5
 8005b92:	ec51 0b19 	vmov	r0, r1, d9
 8005b96:	f7fa fd47 	bl	8000628 <__aeabi_dmul>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	f7fa fb8b 	bl	80002bc <__adddf3>
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460f      	mov	r7, r1
 8005baa:	4602      	mov	r2, r0
 8005bac:	460b      	mov	r3, r1
 8005bae:	4640      	mov	r0, r8
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	f7fa fb83 	bl	80002bc <__adddf3>
 8005bb6:	a33e      	add	r3, pc, #248	; (adr r3, 8005cb0 <__ieee754_pow+0x738>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	460d      	mov	r5, r1
 8005bc2:	f7fa fd31 	bl	8000628 <__aeabi_dmul>
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	ec41 0b18 	vmov	d8, r0, r1
 8005bcc:	464b      	mov	r3, r9
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fb71 	bl	80002b8 <__aeabi_dsub>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4630      	mov	r0, r6
 8005bdc:	4639      	mov	r1, r7
 8005bde:	f7fa fb6b 	bl	80002b8 <__aeabi_dsub>
 8005be2:	a335      	add	r3, pc, #212	; (adr r3, 8005cb8 <__ieee754_pow+0x740>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fd1e 	bl	8000628 <__aeabi_dmul>
 8005bec:	a334      	add	r3, pc, #208	; (adr r3, 8005cc0 <__ieee754_pow+0x748>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	4606      	mov	r6, r0
 8005bf4:	460f      	mov	r7, r1
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	f7fa fd15 	bl	8000628 <__aeabi_dmul>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4630      	mov	r0, r6
 8005c04:	4639      	mov	r1, r7
 8005c06:	f7fa fb59 	bl	80002bc <__adddf3>
 8005c0a:	9a07      	ldr	r2, [sp, #28]
 8005c0c:	4b37      	ldr	r3, [pc, #220]	; (8005cec <__ieee754_pow+0x774>)
 8005c0e:	4413      	add	r3, r2
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa fb52 	bl	80002bc <__adddf3>
 8005c18:	4682      	mov	sl, r0
 8005c1a:	9805      	ldr	r0, [sp, #20]
 8005c1c:	468b      	mov	fp, r1
 8005c1e:	f7fa fc99 	bl	8000554 <__aeabi_i2d>
 8005c22:	9a07      	ldr	r2, [sp, #28]
 8005c24:	4b32      	ldr	r3, [pc, #200]	; (8005cf0 <__ieee754_pow+0x778>)
 8005c26:	4413      	add	r3, r2
 8005c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	460f      	mov	r7, r1
 8005c30:	4652      	mov	r2, sl
 8005c32:	465b      	mov	r3, fp
 8005c34:	ec51 0b18 	vmov	r0, r1, d8
 8005c38:	f7fa fb40 	bl	80002bc <__adddf3>
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	f7fa fb3c 	bl	80002bc <__adddf3>
 8005c44:	4632      	mov	r2, r6
 8005c46:	463b      	mov	r3, r7
 8005c48:	f7fa fb38 	bl	80002bc <__adddf3>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	4632      	mov	r2, r6
 8005c50:	463b      	mov	r3, r7
 8005c52:	4604      	mov	r4, r0
 8005c54:	460d      	mov	r5, r1
 8005c56:	f7fa fb2f 	bl	80002b8 <__aeabi_dsub>
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	f7fa fb2b 	bl	80002b8 <__aeabi_dsub>
 8005c62:	ec53 2b18 	vmov	r2, r3, d8
 8005c66:	f7fa fb27 	bl	80002b8 <__aeabi_dsub>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4650      	mov	r0, sl
 8005c70:	4659      	mov	r1, fp
 8005c72:	e610      	b.n	8005896 <__ieee754_pow+0x31e>
 8005c74:	2401      	movs	r4, #1
 8005c76:	e6a1      	b.n	80059bc <__ieee754_pow+0x444>
 8005c78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005cc8 <__ieee754_pow+0x750>
 8005c7c:	e617      	b.n	80058ae <__ieee754_pow+0x336>
 8005c7e:	bf00      	nop
 8005c80:	4a454eef 	.word	0x4a454eef
 8005c84:	3fca7e28 	.word	0x3fca7e28
 8005c88:	93c9db65 	.word	0x93c9db65
 8005c8c:	3fcd864a 	.word	0x3fcd864a
 8005c90:	a91d4101 	.word	0xa91d4101
 8005c94:	3fd17460 	.word	0x3fd17460
 8005c98:	518f264d 	.word	0x518f264d
 8005c9c:	3fd55555 	.word	0x3fd55555
 8005ca0:	db6fabff 	.word	0xdb6fabff
 8005ca4:	3fdb6db6 	.word	0x3fdb6db6
 8005ca8:	33333303 	.word	0x33333303
 8005cac:	3fe33333 	.word	0x3fe33333
 8005cb0:	e0000000 	.word	0xe0000000
 8005cb4:	3feec709 	.word	0x3feec709
 8005cb8:	dc3a03fd 	.word	0xdc3a03fd
 8005cbc:	3feec709 	.word	0x3feec709
 8005cc0:	145b01f5 	.word	0x145b01f5
 8005cc4:	be3e2fe0 	.word	0xbe3e2fe0
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	3ff00000 	.word	0x3ff00000
 8005cd0:	7ff00000 	.word	0x7ff00000
 8005cd4:	43400000 	.word	0x43400000
 8005cd8:	0003988e 	.word	0x0003988e
 8005cdc:	000bb679 	.word	0x000bb679
 8005ce0:	08006350 	.word	0x08006350
 8005ce4:	3ff00000 	.word	0x3ff00000
 8005ce8:	40080000 	.word	0x40080000
 8005cec:	08006370 	.word	0x08006370
 8005cf0:	08006360 	.word	0x08006360
 8005cf4:	a3b5      	add	r3, pc, #724	; (adr r3, 8005fcc <__ieee754_pow+0xa54>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	4640      	mov	r0, r8
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	f7fa fadd 	bl	80002bc <__adddf3>
 8005d02:	4622      	mov	r2, r4
 8005d04:	ec41 0b1a 	vmov	d10, r0, r1
 8005d08:	462b      	mov	r3, r5
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	f7fa fad3 	bl	80002b8 <__aeabi_dsub>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	ec51 0b1a 	vmov	r0, r1, d10
 8005d1a:	f7fa ff15 	bl	8000b48 <__aeabi_dcmpgt>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	f47f ae04 	bne.w	800592c <__ieee754_pow+0x3b4>
 8005d24:	4aa4      	ldr	r2, [pc, #656]	; (8005fb8 <__ieee754_pow+0xa40>)
 8005d26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	f340 8108 	ble.w	8005f40 <__ieee754_pow+0x9c8>
 8005d30:	151b      	asrs	r3, r3, #20
 8005d32:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005d36:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005d3a:	fa4a f303 	asr.w	r3, sl, r3
 8005d3e:	445b      	add	r3, fp
 8005d40:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005d44:	4e9d      	ldr	r6, [pc, #628]	; (8005fbc <__ieee754_pow+0xa44>)
 8005d46:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005d4a:	4116      	asrs	r6, r2
 8005d4c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005d50:	2000      	movs	r0, #0
 8005d52:	ea23 0106 	bic.w	r1, r3, r6
 8005d56:	f1c2 0214 	rsb	r2, r2, #20
 8005d5a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005d5e:	fa4a fa02 	asr.w	sl, sl, r2
 8005d62:	f1bb 0f00 	cmp.w	fp, #0
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	bfb8      	it	lt
 8005d70:	f1ca 0a00 	rsblt	sl, sl, #0
 8005d74:	f7fa faa0 	bl	80002b8 <__aeabi_dsub>
 8005d78:	ec41 0b19 	vmov	d9, r0, r1
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	464b      	mov	r3, r9
 8005d80:	ec51 0b19 	vmov	r0, r1, d9
 8005d84:	f7fa fa9a 	bl	80002bc <__adddf3>
 8005d88:	a37b      	add	r3, pc, #492	; (adr r3, 8005f78 <__ieee754_pow+0xa00>)
 8005d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8e:	2000      	movs	r0, #0
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	f7fa fc48 	bl	8000628 <__aeabi_dmul>
 8005d98:	ec53 2b19 	vmov	r2, r3, d9
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	460f      	mov	r7, r1
 8005da0:	4620      	mov	r0, r4
 8005da2:	4629      	mov	r1, r5
 8005da4:	f7fa fa88 	bl	80002b8 <__aeabi_dsub>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fa82 	bl	80002b8 <__aeabi_dsub>
 8005db4:	a372      	add	r3, pc, #456	; (adr r3, 8005f80 <__ieee754_pow+0xa08>)
 8005db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dba:	f7fa fc35 	bl	8000628 <__aeabi_dmul>
 8005dbe:	a372      	add	r3, pc, #456	; (adr r3, 8005f88 <__ieee754_pow+0xa10>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	4689      	mov	r9, r1
 8005dc8:	4620      	mov	r0, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	f7fa fc2c 	bl	8000628 <__aeabi_dmul>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	f7fa fa70 	bl	80002bc <__adddf3>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fa68 	bl	80002bc <__adddf3>
 8005dec:	4632      	mov	r2, r6
 8005dee:	463b      	mov	r3, r7
 8005df0:	4680      	mov	r8, r0
 8005df2:	4689      	mov	r9, r1
 8005df4:	f7fa fa60 	bl	80002b8 <__aeabi_dsub>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fa5a 	bl	80002b8 <__aeabi_dsub>
 8005e04:	4642      	mov	r2, r8
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa fc0a 	bl	8000628 <__aeabi_dmul>
 8005e14:	a35e      	add	r3, pc, #376	; (adr r3, 8005f90 <__ieee754_pow+0xa18>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	f7fa fc03 	bl	8000628 <__aeabi_dmul>
 8005e22:	a35d      	add	r3, pc, #372	; (adr r3, 8005f98 <__ieee754_pow+0xa20>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fa46 	bl	80002b8 <__aeabi_dsub>
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	462b      	mov	r3, r5
 8005e30:	f7fa fbfa 	bl	8000628 <__aeabi_dmul>
 8005e34:	a35a      	add	r3, pc, #360	; (adr r3, 8005fa0 <__ieee754_pow+0xa28>)
 8005e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3a:	f7fa fa3f 	bl	80002bc <__adddf3>
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	f7fa fbf1 	bl	8000628 <__aeabi_dmul>
 8005e46:	a358      	add	r3, pc, #352	; (adr r3, 8005fa8 <__ieee754_pow+0xa30>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fa34 	bl	80002b8 <__aeabi_dsub>
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	f7fa fbe8 	bl	8000628 <__aeabi_dmul>
 8005e58:	a355      	add	r3, pc, #340	; (adr r3, 8005fb0 <__ieee754_pow+0xa38>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fa2d 	bl	80002bc <__adddf3>
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	f7fa fbdf 	bl	8000628 <__aeabi_dmul>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4649      	mov	r1, r9
 8005e72:	f7fa fa21 	bl	80002b8 <__aeabi_dsub>
 8005e76:	4604      	mov	r4, r0
 8005e78:	460d      	mov	r5, r1
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fbd1 	bl	8000628 <__aeabi_dmul>
 8005e86:	2200      	movs	r2, #0
 8005e88:	ec41 0b19 	vmov	d9, r0, r1
 8005e8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	f7fa fa10 	bl	80002b8 <__aeabi_dsub>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	ec51 0b19 	vmov	r0, r1, d9
 8005ea0:	f7fa fcec 	bl	800087c <__aeabi_ddiv>
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	460d      	mov	r5, r1
 8005eaa:	463b      	mov	r3, r7
 8005eac:	4640      	mov	r0, r8
 8005eae:	4649      	mov	r1, r9
 8005eb0:	f7fa fbba 	bl	8000628 <__aeabi_dmul>
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	463b      	mov	r3, r7
 8005eb8:	f7fa fa00 	bl	80002bc <__adddf3>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f7fa f9f8 	bl	80002b8 <__aeabi_dsub>
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	f7fa f9f4 	bl	80002b8 <__aeabi_dsub>
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	493a      	ldr	r1, [pc, #232]	; (8005fc0 <__ieee754_pow+0xa48>)
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f7fa f9ee 	bl	80002b8 <__aeabi_dsub>
 8005edc:	ec41 0b10 	vmov	d0, r0, r1
 8005ee0:	ee10 3a90 	vmov	r3, s1
 8005ee4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eec:	da2b      	bge.n	8005f46 <__ieee754_pow+0x9ce>
 8005eee:	4650      	mov	r0, sl
 8005ef0:	f000 f966 	bl	80061c0 <scalbn>
 8005ef4:	ec51 0b10 	vmov	r0, r1, d0
 8005ef8:	ec53 2b18 	vmov	r2, r3, d8
 8005efc:	f7ff bbed 	b.w	80056da <__ieee754_pow+0x162>
 8005f00:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <__ieee754_pow+0xa4c>)
 8005f02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005f06:	429e      	cmp	r6, r3
 8005f08:	f77f af0c 	ble.w	8005d24 <__ieee754_pow+0x7ac>
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <__ieee754_pow+0xa50>)
 8005f0e:	440b      	add	r3, r1
 8005f10:	4303      	orrs	r3, r0
 8005f12:	d009      	beq.n	8005f28 <__ieee754_pow+0x9b0>
 8005f14:	ec51 0b18 	vmov	r0, r1, d8
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	f7fa fdf6 	bl	8000b0c <__aeabi_dcmplt>
 8005f20:	3800      	subs	r0, #0
 8005f22:	bf18      	it	ne
 8005f24:	2001      	movne	r0, #1
 8005f26:	e447      	b.n	80057b8 <__ieee754_pow+0x240>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	f7fa f9c4 	bl	80002b8 <__aeabi_dsub>
 8005f30:	4642      	mov	r2, r8
 8005f32:	464b      	mov	r3, r9
 8005f34:	f7fa fdfe 	bl	8000b34 <__aeabi_dcmpge>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f43f aef3 	beq.w	8005d24 <__ieee754_pow+0x7ac>
 8005f3e:	e7e9      	b.n	8005f14 <__ieee754_pow+0x99c>
 8005f40:	f04f 0a00 	mov.w	sl, #0
 8005f44:	e71a      	b.n	8005d7c <__ieee754_pow+0x804>
 8005f46:	ec51 0b10 	vmov	r0, r1, d0
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	e7d4      	b.n	8005ef8 <__ieee754_pow+0x980>
 8005f4e:	491c      	ldr	r1, [pc, #112]	; (8005fc0 <__ieee754_pow+0xa48>)
 8005f50:	2000      	movs	r0, #0
 8005f52:	f7ff bb30 	b.w	80055b6 <__ieee754_pow+0x3e>
 8005f56:	2000      	movs	r0, #0
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f7ff bb2c 	b.w	80055b6 <__ieee754_pow+0x3e>
 8005f5e:	4630      	mov	r0, r6
 8005f60:	4639      	mov	r1, r7
 8005f62:	f7ff bb28 	b.w	80055b6 <__ieee754_pow+0x3e>
 8005f66:	9204      	str	r2, [sp, #16]
 8005f68:	f7ff bb7a 	b.w	8005660 <__ieee754_pow+0xe8>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f7ff bb64 	b.w	800563a <__ieee754_pow+0xc2>
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
 8005f78:	00000000 	.word	0x00000000
 8005f7c:	3fe62e43 	.word	0x3fe62e43
 8005f80:	fefa39ef 	.word	0xfefa39ef
 8005f84:	3fe62e42 	.word	0x3fe62e42
 8005f88:	0ca86c39 	.word	0x0ca86c39
 8005f8c:	be205c61 	.word	0xbe205c61
 8005f90:	72bea4d0 	.word	0x72bea4d0
 8005f94:	3e663769 	.word	0x3e663769
 8005f98:	c5d26bf1 	.word	0xc5d26bf1
 8005f9c:	3ebbbd41 	.word	0x3ebbbd41
 8005fa0:	af25de2c 	.word	0xaf25de2c
 8005fa4:	3f11566a 	.word	0x3f11566a
 8005fa8:	16bebd93 	.word	0x16bebd93
 8005fac:	3f66c16c 	.word	0x3f66c16c
 8005fb0:	5555553e 	.word	0x5555553e
 8005fb4:	3fc55555 	.word	0x3fc55555
 8005fb8:	3fe00000 	.word	0x3fe00000
 8005fbc:	000fffff 	.word	0x000fffff
 8005fc0:	3ff00000 	.word	0x3ff00000
 8005fc4:	4090cbff 	.word	0x4090cbff
 8005fc8:	3f6f3400 	.word	0x3f6f3400
 8005fcc:	652b82fe 	.word	0x652b82fe
 8005fd0:	3c971547 	.word	0x3c971547

08005fd4 <__ieee754_sqrt>:
 8005fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd8:	ec55 4b10 	vmov	r4, r5, d0
 8005fdc:	4e55      	ldr	r6, [pc, #340]	; (8006134 <__ieee754_sqrt+0x160>)
 8005fde:	43ae      	bics	r6, r5
 8005fe0:	ee10 0a10 	vmov	r0, s0
 8005fe4:	ee10 3a10 	vmov	r3, s0
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4629      	mov	r1, r5
 8005fec:	d110      	bne.n	8006010 <__ieee754_sqrt+0x3c>
 8005fee:	ee10 2a10 	vmov	r2, s0
 8005ff2:	462b      	mov	r3, r5
 8005ff4:	f7fa fb18 	bl	8000628 <__aeabi_dmul>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa f95c 	bl	80002bc <__adddf3>
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	ec45 4b10 	vmov	d0, r4, r5
 800600c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006010:	2d00      	cmp	r5, #0
 8006012:	dc10      	bgt.n	8006036 <__ieee754_sqrt+0x62>
 8006014:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006018:	4330      	orrs	r0, r6
 800601a:	d0f5      	beq.n	8006008 <__ieee754_sqrt+0x34>
 800601c:	b15d      	cbz	r5, 8006036 <__ieee754_sqrt+0x62>
 800601e:	ee10 2a10 	vmov	r2, s0
 8006022:	462b      	mov	r3, r5
 8006024:	ee10 0a10 	vmov	r0, s0
 8006028:	f7fa f946 	bl	80002b8 <__aeabi_dsub>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	f7fa fc24 	bl	800087c <__aeabi_ddiv>
 8006034:	e7e6      	b.n	8006004 <__ieee754_sqrt+0x30>
 8006036:	1512      	asrs	r2, r2, #20
 8006038:	d074      	beq.n	8006124 <__ieee754_sqrt+0x150>
 800603a:	07d4      	lsls	r4, r2, #31
 800603c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006040:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006044:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006048:	bf5e      	ittt	pl
 800604a:	0fda      	lsrpl	r2, r3, #31
 800604c:	005b      	lslpl	r3, r3, #1
 800604e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006052:	2400      	movs	r4, #0
 8006054:	0fda      	lsrs	r2, r3, #31
 8006056:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800605a:	107f      	asrs	r7, r7, #1
 800605c:	005b      	lsls	r3, r3, #1
 800605e:	2516      	movs	r5, #22
 8006060:	4620      	mov	r0, r4
 8006062:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006066:	1886      	adds	r6, r0, r2
 8006068:	428e      	cmp	r6, r1
 800606a:	bfde      	ittt	le
 800606c:	1b89      	suble	r1, r1, r6
 800606e:	18b0      	addle	r0, r6, r2
 8006070:	18a4      	addle	r4, r4, r2
 8006072:	0049      	lsls	r1, r1, #1
 8006074:	3d01      	subs	r5, #1
 8006076:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800607a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800607e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006082:	d1f0      	bne.n	8006066 <__ieee754_sqrt+0x92>
 8006084:	462a      	mov	r2, r5
 8006086:	f04f 0e20 	mov.w	lr, #32
 800608a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800608e:	4281      	cmp	r1, r0
 8006090:	eb06 0c05 	add.w	ip, r6, r5
 8006094:	dc02      	bgt.n	800609c <__ieee754_sqrt+0xc8>
 8006096:	d113      	bne.n	80060c0 <__ieee754_sqrt+0xec>
 8006098:	459c      	cmp	ip, r3
 800609a:	d811      	bhi.n	80060c0 <__ieee754_sqrt+0xec>
 800609c:	f1bc 0f00 	cmp.w	ip, #0
 80060a0:	eb0c 0506 	add.w	r5, ip, r6
 80060a4:	da43      	bge.n	800612e <__ieee754_sqrt+0x15a>
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	db41      	blt.n	800612e <__ieee754_sqrt+0x15a>
 80060aa:	f100 0801 	add.w	r8, r0, #1
 80060ae:	1a09      	subs	r1, r1, r0
 80060b0:	459c      	cmp	ip, r3
 80060b2:	bf88      	it	hi
 80060b4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80060b8:	eba3 030c 	sub.w	r3, r3, ip
 80060bc:	4432      	add	r2, r6
 80060be:	4640      	mov	r0, r8
 80060c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80060c4:	f1be 0e01 	subs.w	lr, lr, #1
 80060c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80060cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060d4:	d1db      	bne.n	800608e <__ieee754_sqrt+0xba>
 80060d6:	430b      	orrs	r3, r1
 80060d8:	d006      	beq.n	80060e8 <__ieee754_sqrt+0x114>
 80060da:	1c50      	adds	r0, r2, #1
 80060dc:	bf13      	iteet	ne
 80060de:	3201      	addne	r2, #1
 80060e0:	3401      	addeq	r4, #1
 80060e2:	4672      	moveq	r2, lr
 80060e4:	f022 0201 	bicne.w	r2, r2, #1
 80060e8:	1063      	asrs	r3, r4, #1
 80060ea:	0852      	lsrs	r2, r2, #1
 80060ec:	07e1      	lsls	r1, r4, #31
 80060ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80060f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80060f6:	bf48      	it	mi
 80060f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80060fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006100:	4614      	mov	r4, r2
 8006102:	e781      	b.n	8006008 <__ieee754_sqrt+0x34>
 8006104:	0ad9      	lsrs	r1, r3, #11
 8006106:	3815      	subs	r0, #21
 8006108:	055b      	lsls	r3, r3, #21
 800610a:	2900      	cmp	r1, #0
 800610c:	d0fa      	beq.n	8006104 <__ieee754_sqrt+0x130>
 800610e:	02cd      	lsls	r5, r1, #11
 8006110:	d50a      	bpl.n	8006128 <__ieee754_sqrt+0x154>
 8006112:	f1c2 0420 	rsb	r4, r2, #32
 8006116:	fa23 f404 	lsr.w	r4, r3, r4
 800611a:	1e55      	subs	r5, r2, #1
 800611c:	4093      	lsls	r3, r2
 800611e:	4321      	orrs	r1, r4
 8006120:	1b42      	subs	r2, r0, r5
 8006122:	e78a      	b.n	800603a <__ieee754_sqrt+0x66>
 8006124:	4610      	mov	r0, r2
 8006126:	e7f0      	b.n	800610a <__ieee754_sqrt+0x136>
 8006128:	0049      	lsls	r1, r1, #1
 800612a:	3201      	adds	r2, #1
 800612c:	e7ef      	b.n	800610e <__ieee754_sqrt+0x13a>
 800612e:	4680      	mov	r8, r0
 8006130:	e7bd      	b.n	80060ae <__ieee754_sqrt+0xda>
 8006132:	bf00      	nop
 8006134:	7ff00000 	.word	0x7ff00000

08006138 <with_errno>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	4604      	mov	r4, r0
 800613c:	460d      	mov	r5, r1
 800613e:	4616      	mov	r6, r2
 8006140:	f7fe fcf6 	bl	8004b30 <__errno>
 8006144:	4629      	mov	r1, r5
 8006146:	6006      	str	r6, [r0, #0]
 8006148:	4620      	mov	r0, r4
 800614a:	bd70      	pop	{r4, r5, r6, pc}

0800614c <xflow>:
 800614c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800614e:	4614      	mov	r4, r2
 8006150:	461d      	mov	r5, r3
 8006152:	b108      	cbz	r0, 8006158 <xflow+0xc>
 8006154:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006158:	e9cd 2300 	strd	r2, r3, [sp]
 800615c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006160:	4620      	mov	r0, r4
 8006162:	4629      	mov	r1, r5
 8006164:	f7fa fa60 	bl	8000628 <__aeabi_dmul>
 8006168:	2222      	movs	r2, #34	; 0x22
 800616a:	b003      	add	sp, #12
 800616c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006170:	f7ff bfe2 	b.w	8006138 <with_errno>

08006174 <__math_uflow>:
 8006174:	b508      	push	{r3, lr}
 8006176:	2200      	movs	r2, #0
 8006178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800617c:	f7ff ffe6 	bl	800614c <xflow>
 8006180:	ec41 0b10 	vmov	d0, r0, r1
 8006184:	bd08      	pop	{r3, pc}

08006186 <__math_oflow>:
 8006186:	b508      	push	{r3, lr}
 8006188:	2200      	movs	r2, #0
 800618a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800618e:	f7ff ffdd 	bl	800614c <xflow>
 8006192:	ec41 0b10 	vmov	d0, r0, r1
 8006196:	bd08      	pop	{r3, pc}

08006198 <fabs>:
 8006198:	ec51 0b10 	vmov	r0, r1, d0
 800619c:	ee10 2a10 	vmov	r2, s0
 80061a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061a4:	ec43 2b10 	vmov	d0, r2, r3
 80061a8:	4770      	bx	lr

080061aa <finite>:
 80061aa:	b082      	sub	sp, #8
 80061ac:	ed8d 0b00 	vstr	d0, [sp]
 80061b0:	9801      	ldr	r0, [sp, #4]
 80061b2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80061b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061ba:	0fc0      	lsrs	r0, r0, #31
 80061bc:	b002      	add	sp, #8
 80061be:	4770      	bx	lr

080061c0 <scalbn>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	ec55 4b10 	vmov	r4, r5, d0
 80061c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80061ca:	4606      	mov	r6, r0
 80061cc:	462b      	mov	r3, r5
 80061ce:	b99a      	cbnz	r2, 80061f8 <scalbn+0x38>
 80061d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061d4:	4323      	orrs	r3, r4
 80061d6:	d036      	beq.n	8006246 <scalbn+0x86>
 80061d8:	4b39      	ldr	r3, [pc, #228]	; (80062c0 <scalbn+0x100>)
 80061da:	4629      	mov	r1, r5
 80061dc:	ee10 0a10 	vmov	r0, s0
 80061e0:	2200      	movs	r2, #0
 80061e2:	f7fa fa21 	bl	8000628 <__aeabi_dmul>
 80061e6:	4b37      	ldr	r3, [pc, #220]	; (80062c4 <scalbn+0x104>)
 80061e8:	429e      	cmp	r6, r3
 80061ea:	4604      	mov	r4, r0
 80061ec:	460d      	mov	r5, r1
 80061ee:	da10      	bge.n	8006212 <scalbn+0x52>
 80061f0:	a32b      	add	r3, pc, #172	; (adr r3, 80062a0 <scalbn+0xe0>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	e03a      	b.n	800626e <scalbn+0xae>
 80061f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061fc:	428a      	cmp	r2, r1
 80061fe:	d10c      	bne.n	800621a <scalbn+0x5a>
 8006200:	ee10 2a10 	vmov	r2, s0
 8006204:	4620      	mov	r0, r4
 8006206:	4629      	mov	r1, r5
 8006208:	f7fa f858 	bl	80002bc <__adddf3>
 800620c:	4604      	mov	r4, r0
 800620e:	460d      	mov	r5, r1
 8006210:	e019      	b.n	8006246 <scalbn+0x86>
 8006212:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006216:	460b      	mov	r3, r1
 8006218:	3a36      	subs	r2, #54	; 0x36
 800621a:	4432      	add	r2, r6
 800621c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006220:	428a      	cmp	r2, r1
 8006222:	dd08      	ble.n	8006236 <scalbn+0x76>
 8006224:	2d00      	cmp	r5, #0
 8006226:	a120      	add	r1, pc, #128	; (adr r1, 80062a8 <scalbn+0xe8>)
 8006228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800622c:	da1c      	bge.n	8006268 <scalbn+0xa8>
 800622e:	a120      	add	r1, pc, #128	; (adr r1, 80062b0 <scalbn+0xf0>)
 8006230:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006234:	e018      	b.n	8006268 <scalbn+0xa8>
 8006236:	2a00      	cmp	r2, #0
 8006238:	dd08      	ble.n	800624c <scalbn+0x8c>
 800623a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800623e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006242:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006246:	ec45 4b10 	vmov	d0, r4, r5
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006250:	da19      	bge.n	8006286 <scalbn+0xc6>
 8006252:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006256:	429e      	cmp	r6, r3
 8006258:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800625c:	dd0a      	ble.n	8006274 <scalbn+0xb4>
 800625e:	a112      	add	r1, pc, #72	; (adr r1, 80062a8 <scalbn+0xe8>)
 8006260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e2      	bne.n	800622e <scalbn+0x6e>
 8006268:	a30f      	add	r3, pc, #60	; (adr r3, 80062a8 <scalbn+0xe8>)
 800626a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626e:	f7fa f9db 	bl	8000628 <__aeabi_dmul>
 8006272:	e7cb      	b.n	800620c <scalbn+0x4c>
 8006274:	a10a      	add	r1, pc, #40	; (adr r1, 80062a0 <scalbn+0xe0>)
 8006276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0b8      	beq.n	80061f0 <scalbn+0x30>
 800627e:	a10e      	add	r1, pc, #56	; (adr r1, 80062b8 <scalbn+0xf8>)
 8006280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006284:	e7b4      	b.n	80061f0 <scalbn+0x30>
 8006286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800628a:	3236      	adds	r2, #54	; 0x36
 800628c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006290:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006294:	4620      	mov	r0, r4
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <scalbn+0x108>)
 8006298:	2200      	movs	r2, #0
 800629a:	e7e8      	b.n	800626e <scalbn+0xae>
 800629c:	f3af 8000 	nop.w
 80062a0:	c2f8f359 	.word	0xc2f8f359
 80062a4:	01a56e1f 	.word	0x01a56e1f
 80062a8:	8800759c 	.word	0x8800759c
 80062ac:	7e37e43c 	.word	0x7e37e43c
 80062b0:	8800759c 	.word	0x8800759c
 80062b4:	fe37e43c 	.word	0xfe37e43c
 80062b8:	c2f8f359 	.word	0xc2f8f359
 80062bc:	81a56e1f 	.word	0x81a56e1f
 80062c0:	43500000 	.word	0x43500000
 80062c4:	ffff3cb0 	.word	0xffff3cb0
 80062c8:	3c900000 	.word	0x3c900000

080062cc <_init>:
 80062cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ce:	bf00      	nop
 80062d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062d2:	bc08      	pop	{r3}
 80062d4:	469e      	mov	lr, r3
 80062d6:	4770      	bx	lr

080062d8 <_fini>:
 80062d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062da:	bf00      	nop
 80062dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062de:	bc08      	pop	{r3}
 80062e0:	469e      	mov	lr, r3
 80062e2:	4770      	bx	lr
